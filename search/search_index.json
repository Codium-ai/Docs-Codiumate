{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome-to-qodo-gen","title":"Welcome to Qodo Gen","text":""},{"location":"#code-test-and-review-with-confidence-your-ai-mate-by-qodo","title":"Code, Test, and Review with Confidence - Your AI Mate by Qodo","text":"<p>Welcome to Qodo Gen, your AI-powered coding companion designed to enhance your software development cycle. From generating tests to writing and reviewing code, Qodo Gen offers a suite of tools to increase efficiency, improve code quality, and streamline your development process.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Qodo Gen seamlessly integrates with your favorite IDEs:</p> <ul> <li> <p>VSCode </p> <p> Install Qodo Gen extension for VSCode</p> </li> <li> <p>JetBrains </p> <p> Install Qodo Gen plugin for all JetBrains IDEs</p> </li> </ul>"},{"location":"#release-notes","title":"Release Notes","text":""},{"location":"#visit-our-release-notes-portal-for-the-latest-news","title":"Visit our Release Notes portal for the latest news","text":""},{"location":"#main-capabilities","title":"Main capabilities","text":"<p>Qodo Gen comes packed with features to enhance every step of your development cycle:</p> Method Description Iterative Test Generation Automatically generate comprehensive test suites tailored to your codebase, ensuring high code quality and reliability. Intelligent Code Assistance Receive real-time suggestions and solutions for coding queries, documentation, debugging, and more. Efficient PR Reviews Simplify your pull request review process with AI-powered insights, highlighting potential issues and improvements. Smart Code Completion Enhance your coding efficiency with AI-driven suggestions that anticipate your needs and complete code faster. Coding-Agent Empower your coding process with an AI-powered assistant that generates detailed task implementation plans and provides you with step-by-step guidance and actionable insights to efficiently tackle coding tasks."},{"location":"#supported-languages","title":"Supported languages","text":"<p>Qodo Gen supports ALL programming languages for test generation!</p> <p>Learn more about language support</p>"},{"location":"#join-the-community","title":"Join the community","text":"<p>If you need assistance or have questions about Qodo Gen, feel free to join our community on GitHub Discussions for VSCode or for JetBrains, or join our Discord community.</p>"},{"location":"#welcome-aboard-and-happy-coding","title":"Welcome aboard and happy coding!","text":""},{"location":"chat/","title":"Qodo Gen Chat","text":""},{"location":"chat/#qodo-gen-chat","title":"Qodo Gen Chat","text":""},{"location":"chat/#code-test-and-merge-with-confidence","title":"Code, Test and Merge with Confidence","text":""},{"location":"chat/#overview","title":"Overview","text":"<p>Welcome to Qodo Gen Chat, the integrated chat-based assistant designed to elevate your coding experience. Leveraging the power of advanced language models, Qodo Gen offers real-time coding assistance, documentation generation, code review, and more, all within your development environment. Whether you're a solo developer or part of a team, Qodo Gen streamlines your workflow, enhances code quality, and accelerates your project development.</p>"},{"location":"chat/#use-cases","title":"Use Cases","text":"<ul> <li>General Coding Assistance: Ask any coding-related questions, whether it's about algorithms, best practices, language-specific queries, or debugging techniques.</li> <li>Code Generation: Request code snippets or examples for understanding concepts or solving generic problems.</li> <li>Chat History: Review past conversations to refresh your memory or explore new topics.</li> </ul>"},{"location":"chat/#key-features","title":"Key Features","text":""},{"location":"chat/#focus","title":"Focus","text":"<p>To suit the context of your work, you can add a focus to any question asked:</p> <ul> <li>Current File: Focuses on the current file, offering detailed assistance and command functionality for selected lines and components.</li> <li>Git-Diff: Expands Qodo Gen's scope to your focus a desired Git Diff, allowing for comprehensive analysis and actions on changesets. </li> </ul> <p>Each focus is designed to optimize Qodo Gen's assistance based on the scope of your coding tasks. Read more about Focus Selection.</p>"},{"location":"chat/#commands","title":"Commands","text":"<p>Qodo Gen provides a suite of commands tailored to various coding needs, from generating docstrings and reviewing code to identifying issues and updating changelogs. Commands like <code>/ask</code>, <code>/explain</code>, <code>/commit</code>, and <code>/improve</code> are just the beginning of what Qodo Gen can do to support your coding journey. Learn more about commands.</p>"},{"location":"chat/#extra-context","title":"Extra Context","text":"<p>For each message you send in the chat, you can enhance the accuracy of the results by adding extra context relevant to your request. Options include code snippets, files, folders, or even the entire project. Learrn mode about Extra Context.</p> <p>Additionally, you can attach an image to the chat and make any request related to that image. Explore Adding Image to the Chat.</p>"},{"location":"chat/#chat-history","title":"Chat History","text":"<p>Qodo Gen Chat maintains a history of your 20 most recent conversations, allowing you to review past interactions, refresh your memory, or explore new topics. You can continue a past chat to dive deeper into a topic or request additional information. Learn more about Chat History.</p>"},{"location":"chat/#task-coding-agent","title":"Task Coding-Agent","text":"<p>Coding-Agent harnesses the power of Qodo Gen's AI to offer unparalleled support in your coding journey, transforming your development workflow with intelligent, real-time assistance. This mode focuses on enhancing your coding efficiency and quality by generating detailed plans for your coding tasks and guiding you through their implementation. Discover Coding-Agent.</p>"},{"location":"chat/add-context/","title":"Add Extra Context","text":""},{"location":"chat/add-context/#add-extra-context","title":"Add Extra Context","text":"<p>This feature allows you to enhance the context of your Qodo Gen interactions by adding various elements from your project. Adding more context leads to more accurate and relevant responses, customizing the assistance to your specific coding needs.</p>"},{"location":"chat/add-context/#how-to-add-more-context","title":"How to Add More Context","text":"<p>Different context options include:</p> <ol> <li> <p>Code Snippet:</p> <ul> <li>Action: Select any code snippet you want to add as context.</li> <li>Shortcut: Right-click on the selected code and choose \"Add to Qodo Gen as context\" from the context menu, or use the shortcut:<ul> <li>In VSCode: Ctrl+Shift+E on Windows, Cmd+Shift+E on Mac.</li> <li>In JetBrains: Ctrl+Alt+, on Windows, Cmd+Alt+, on Mac.</li> </ul> </li> </ul> </li> <li> <p>Files:</p> <ul> <li>Action: Click on the \"Add a file or a folder\" option in the <code>@</code> button, or by typing <code>@</code> in the chat.</li> <li>Search: Look up and select any file from your project to add as context.</li> </ul> </li> <li> <p>Folder:</p> <ul> <li>Action: Click on the \"Add a file or a folder\" option in the <code>@</code> button, or by typing <code>@</code> in the chat.</li> <li>Search: Look up and select any folder from your project to add as context.</li> <li>Process: Qodo Gen Chat will index the selected folder and include it as part of the context. A pre-request search identifies relevant code within the indexed folder.</li> </ul> </li> <li> <p>Entire Project:</p> <ul> <li>Action: Click on the \"Add a file or a folder\" option in the <code>@</code> button, or by typing <code>@</code> in the chat. Select \"Entire Project\" to index and include your entire project as context.</li> <li>Behavior: This option functions similarly to the Folder option, providing comprehensive context.</li> </ul> </li> <li> <p>Add an Image     You can add an image as a context to your request. Read more about adding images to the chat.</p> </li> <li> <p>Add Company Codebase     You can add entire folders and files from your company's codebase as extra context, making your experience more relevant and tailored to your specific needs. Read more about adding images to the chat.</p> </li> </ol> <p>Please Notice</p> <p>In JetBrains, you can index up to 1,000 files in a single folder or project.</p> <p>In VSCode, you can index up to 50,000 files in a single folder or project.</p> <p>The index is stored locally and is not shared with anyone.</p>"},{"location":"chat/add-context/#utilizing-additional-context","title":"Utilizing Additional Context","text":"<p>After adding context, proceed with selecting your primary focus and invoking any command. Qodo Gen automatically considers the added context, enhancing the accuracy and relevance of the responses.</p>"},{"location":"chat/add-context/#benefits","title":"Benefits","text":"<ul> <li>Enhanced Accuracy: More detailed context allows Qodo Gen to offer more precise solutions and suggestions.</li> <li>Flexibility: You can add context from different parts of your project, fostering a comprehensive understanding of your coding issues.</li> <li>Efficiency: A richer context streamlines your coding and problem-solving process by reducing the need for further clarification.</li> </ul> <p>The added context persists throughout your session, enriching every command you execute with a deeper understanding of your project's structure and logic. You can remove any piece of context by clicking the trash icon on its tag.</p>"},{"location":"chat/chat-history/","title":"Chat History","text":""},{"location":"chat/chat-history/#chat-history","title":"Chat History","text":""},{"location":"chat/chat-history/#overview","title":"Overview","text":"<p>Qodo Gen Chat maintains a history of your 20 most recent conversations, allowing you to review past interactions, refresh your memory, or explore new topics. You can continue a past chat to dive deeper into a topic or request additional information.</p>"},{"location":"chat/chat-history/#using-chat-history","title":"Using Chat History","text":"<ol> <li>Initiate a Command: Call a command by typing it in the chatbox. </li> <li>Continue the Conversation: At the end of Qodo Gen's response, continue the conversation as long as you wish. Qodo Gen will maintain the context of your initial query, providing tailored responses to your follow-up questions.</li> <li>Start a new Conversation: Click on the \"New Chat\" button on the top right of the chat interface to start a new conversation. Your current chat history will be cleared, and Qodo Gen will be ready to start a new conversation.</li> <li>Check your Chat History: Next to the \"New Chat\" button, find the History button and click on it. The Chat History interface will open. You can see your latest 20 chats with Qodo Gen, switch to each one and continue the conversation if you wish.</li> </ol> <p>Currently, your chat history wouldn't be saved between sessions, and will be deleted once you close VSCode. We are working on adding this feature in the future. Stay tuned!</p>"},{"location":"chat/chat-history/#examples","title":"Examples","text":"<p>Using Chat History</p> <p></p>"},{"location":"chat/coding-agent/","title":"Qodo Gen's Coding-Agent","text":""},{"location":"chat/coding-agent/#qodo-gens-coding-agent","title":"Qodo Gen's Coding-Agent","text":""},{"location":"chat/coding-agent/#overview","title":"Overview","text":"<p>The Coding Agent is Qodo Gen's AI-powered assistant, designed to significantly enhance your coding efficiency and code quality. It combines advanced AI capabilities with an intuitive interface to provide real-time assistance and guidance throughout the coding process.</p> <p>Semi-Pro feature</p> <p>Coding-Agent is available to all users. However, loading the plan into Code-Completion is exclusively available to Teams and Enterprise.</p>"},{"location":"chat/coding-agent/#tools-and-features","title":"Tools and Features","text":""},{"location":"chat/coding-agent/#1-task-implementation-plan","title":"1. Task Implementation Plan","text":"<p>The Coding Agent can generate a detailed plan for implementing a coding task described by you. This plan outlines the steps needed to complete the task effectively:</p> <ul> <li>Review and Adjust: Once the plan is generated, you have the opportunity to review and make any necessary adjustments to ensure it aligns with your project requirements.</li> <li>Code Completion Integration: After finalizing the plan, it can be loaded into the code completion feature. As you follow the steps outlined in the plan, the code completion tool will assist you in writing the required code for each step. While the planning feature is available to all users, the integration with code completion is available for Teams and Enterprise users. Learn more about code completion integration.</li> </ul>"},{"location":"chat/coding-agent/#using-the-task-implementation-plan-in-coding-agent","title":"Using the Task Implementation Plan in Coding-Agent","text":"<p>The Task Implementation Plan streamlines your coding process by breaking down complex tasks into manageable steps. Here's how to utilize this feature:</p> <ul> <li> <p>Step 1: Select Your Context - Begin by identifying all the files and code snippets relevant to your task. Add them as context by right-clicking on the code snippet and choosing \"Add to Qodo Gen as context\", or use the shortcut Ctrl+Shift+E on Windows, Cmd+Shift+E on Mac.</p> </li> <li> <p>Step 2: Describe Your Task - clearly defining the task you need to accomplish. This could be anything from adding a new feature, fixing a bug, or optimizing existing code. Be as detailed as necessary to ensure Qodo Gen can generate an accurate plan. You can add images to your description to improve the clarity of your task. Simply paste the image into your description and Qodo Gen will automatically include it in the generated plan. Read more about Image Integration in Qodo Gen Chat.</p> </li> <li> <p>Step 3: Generate the Plan - Press <code>Enter</code> after describing your task. Qodo Gen will process your input and generate a detailed plan outlining the steps required to complete your task.</p> </li> <li> <p>Step 4: Review the Plan - Take a moment to review the generated plan. Ensure it aligns with your project's needs and covers all aspects of the task.</p> </li> <li> <p>Step 5: Adjust the Plan - If you see areas for improvement or need to modify the plan, click on \"Adjust the plan\". You can ask for specific modifications during the conversation to refine the plan according to your needs.</p> </li> <li> <p>Step 6: Create a Full Task Plan - For a full detailed plan including time estimations, testing strategy, and more information, click on the \"create a full task plan\" button and read the full plan. This comprehensive plan will provide deeper insights and a broader strategy for accomplishing your task.</p> </li> <li> <p>Step 7: Implement the Plan - Once satisfied with the plan, proceed to implement it step by step. Follow the outlined steps carefully to ensure thorough completion of your task.</p> </li> <li> <p>Step 8: Load Plan into Code Completion (Pro Feature ) - For paying users, enhance your coding experience by loading the plan into the code completion tool. Click on \"Load plan into auto-completer\". As you work through the steps, the code completion will assist you, providing relevant suggestions to efficiently write your code according to the plan.</p> </li> </ul>"},{"location":"chat/coding-agent/#2-continuous-code-improvement","title":"2. Continuous Code Improvement","text":"<p>As you work on your code, the Coding Agent proactively offers improvements:</p> <ul> <li>Automated Commands: Upon every \"save\" action, the agent automatically runs commands tailored to the size of the changeset:</li> <li>For small-size changesets, the agent executes the <code>/issues</code> command to identify and suggest fixes for potential issues. Learn about <code>/issues</code>.</li> <li>For mid-size changesets, the agent runs the <code>/improve</code> command to suggest enhancements that elevate your code's quality. Explore <code>/improve</code>.</li> <li>Customizable: This feature can be enabled or disabled in the extension settings, allowing you to customize your experience and control when and how you receive coding suggestions. Adjust your settings.</li> </ul>"},{"location":"chat/coding-agent/#benefits","title":"Benefits","text":"<ul> <li>Enhanced Productivity: By providing a step-by-step plan for coding tasks, the Coding Agent helps streamline your development process, allowing you to focus on implementation.</li> <li>Improved Code Quality: With real-time suggestions for code improvement and error resolution, your codebase becomes more robust and reliable with every save.</li> <li>Personalized Assistance: The Coding Agent tailors its assistance to your specific coding tasks and preferences, making it a dynamic tool in your development arsenal.</li> </ul>"},{"location":"chat/coding-agent/#watch-a-demo","title":"Watch a Demo","text":"<p>Watch this demo of the Coding Agent in action:</p> <p></p>"},{"location":"chat/company-codebase/","title":"Company Codebase","text":""},{"location":"chat/company-codebase/#company-codebase","title":"Company Codebase","text":""},{"location":"chat/company-codebase/#what-is-company-codebase","title":"What is Company Codebase?","text":"<p>Company Codebase helps Qodo Gen Chat to know your codebase better, enabling you to ask complex, code-specific questions and get better answers.</p> <p>For example, with Company Codebase you can ask Qodo Gen Chat \"How do I use our auth service to set up authentication for my new app?\" and get the right response.</p>"},{"location":"chat/company-codebase/#how-does-company-codebase-work","title":"How does Company Codebase work?","text":"<p>Retrieval-Augmented Generation (RAG) is a technique that combines retrieval-based methods with generative models to enhance the quality and relevance of generated content.</p> <p>Qodo Gen uses RAG to understand your company's codebase better, gain deeper context about your projects and answer more complicated or specific questions.</p> <p>Pro feature</p> <p>This feature is available for Enterprise users only.</p>"},{"location":"chat/company-codebase/#using-company-codebase","title":"Using Company Codebase","text":"<p>To start using Company Codebase:</p> <ol> <li>Open Qodo Gen Chat: From your extensions bar, choose the Qodo logo to open Qodo Gen Chat.</li> <li>Choose Extra Context: Click on the <code>Extra Context</code> button located under the chatbox.</li> <li>Select Company Codebase: From the dropdown menu, select <code>Company Codebase</code>.</li> </ol> <p></p>"},{"location":"chat/company-codebase/#what-can-you-do-with-company-codebase","title":"What can you do with Company Codebase?","text":"<p>Using Company Codebase in Qodo Gen Chat, you can get answers to deeper, more complicated questions.</p> <p>For Example, you can try asking:</p> <ul> <li>\"Where in our codebase do we have a function with similar functionality to this one?\"</li> <li>\"How do I use our auth service to set up authentication for my new app?\"</li> <li>\"What are the best practices for using our logging library?\"</li> <li>\"How do I integrate our new API into this project?\"</li> <li>Template Generation: Use RAG to generate templates for common tasks, such as creating a Kotlin class with logging. This can help standardize code across your project.</li> <li>Avoiding Code Duplication: Use RAG to check for code duplication by selecting the context of the current file and asking relevant questions.</li> </ul>"},{"location":"chat/images/","title":"Image Integration in Qodo Gen Chat","text":""},{"location":"chat/images/#image-integration-in-qodo-gen-chat","title":"Image Integration in Qodo Gen Chat","text":""},{"location":"chat/images/#overview","title":"Overview","text":"<p>Image Integration in Qodo Gen chat allows users to paste images directly into the chat. This feature is available when no focus is selected, and Coding-Agent modes, enhancing interactivity and providing valuable visual context to discussions.</p> <p>Semi-Pro feature</p> <p>Using images in the chat is available to all users in Coding-Agent mode, and is exclusively available to Teams and Enterprise users in Free-Chat mode.</p>"},{"location":"chat/images/#using-image-integration","title":"Using Image Integration","text":"<ol> <li>Start a Chat: Open a session in Free Chat or Coding Agent mode.</li> <li>Upload an Image: Click on the <code>@</code> button and choose <code>Upload an image</code>, or paste your image into the chat window.</li> <li>Engage: Add your request - ask specific questions or request actions such as code generation or diagram interpretation.</li> </ol>"},{"location":"chat/images/#examples-of-usage","title":"Examples of Usage","text":""},{"location":"chat/images/#flowcharts-and-schematics","title":"Flowcharts and Schematics","text":"<ul> <li>Visual Interpretation: Upload flowcharts or schematics into the chat. The Coding Agent can analyze these visuals to provide insights or feedback.</li> <li>Code Conversion: Request the Coding Agent to convert diagrams into executable code, streamlining the transition from design to development.</li> </ul>"},{"location":"chat/images/#ui-design","title":"UI Design","text":"<ul> <li>Code Generation: Upload an image of your UI design and ask for the corresponding React code, or any other framework code. The Coding Agent will generate the necessary code snippets to develop your design.</li> </ul>"},{"location":"chat/images/#benefits","title":"Benefits","text":"<ul> <li>Interactive Sessions: Enhances chat sessions by incorporating visual aids.</li> <li>Efficient Development: Accelerates the process from concept to code through direct visual-to-code conversion.</li> <li>Clear Communication: Supports the explanation of complex ideas through visual representation.</li> </ul>"},{"location":"chat/model-selection/","title":"Model Selection","text":""},{"location":"chat/model-selection/#model-selection","title":"Model Selection","text":""},{"location":"chat/model-selection/#overview","title":"Overview","text":"<p>Unleash the full potential of AI.</p> <p>Seamlessly switch between the world's most advanced AI models in real-time to get the best, most relevant chat experience for your query.</p>"},{"location":"chat/model-selection/#available-models","title":"Available Models","text":"<ol> <li>GPT-4.0 - The gold standard for advanced reasoning. Reliable for everyday, iterative coding tasks requiring up-to-date knowledge.</li> <li>GPT-o1-preview - Enhanced reasoning and extensive knowledge base. Ideal for planning, difficult debugging, and deep reasoning about code.</li> <li>GPT-o1-mini - Lightning-fast coding specialist, optimized for efficiency. Best for quick </li> <li>Claude 3.5 Sonnet - Anthropic's latest, built for precision. Ideal for everyday coding tasks with excellent flexibility and speed.</li> <li>Gemini 1.5 Pro - Google's cutting-edge multimodel AI. Best suited for tasks that need the whole project in context, such as large-scale refactoring or generating project-wide documentation.</li> </ol>"},{"location":"chat/model-selection/#using-model-selection","title":"Using Model Selection","text":"<p>Select a model from the dropdown menu on the bottom left below the chatbox. The selected model will be used for your next query.</p>"},{"location":"chat/model-selection/#examples","title":"Examples","text":"<p>Selecting Models</p> <p></p> <p>GPT-4.0</p> <p></p> <p>GPT-o1-preview</p> <p></p> <p>Claude 3.5 Sonnet</p> <p></p> <p>Gemini 1.5 Pro</p> <p></p>"},{"location":"chat/commands/","title":"Commands","text":""},{"location":"chat/commands/#commands","title":"Commands","text":"<p><code>/ask</code> Enables developers to query about specific aspects of their code, offering immediate assistance with code improvement, debugging, and documentation.</p> <p><code>/docstring</code> Automatically generates or improves docstrings for code, enhancing documentation quality and maintainability.</p> <p><code>/enhance</code> Reviews selected code to suggest enhancements for improving readability, adhering to best practices, and refining documentation.</p> <p><code>/explain</code> Provides a structured explanation of the selected code, including descriptions of inputs, outputs, code flow, and usage examples.</p> <p><code>/improve</code> Offers deeper improvement suggestions for code, identifying potential bugs, security concerns, and performance issues.</p> <p><code>/test-suite</code> Generates a comprehensive test suite for the selected code, facilitating a test-driven development approach.</p> <p><code>/quick-test</code> Initiates an iterative mode for generating and refining a quick test suite for immediate feedback on code behavior.</p> <p><code>/commit</code> Generates a descriptive commit message for staged changes, aiming to simplify the commit process with meaningful summaries.</p> <p><code>/describe</code> Produces a structured description of a changeset, useful for preparing pull requests with a clear title, type, and detailed description.</p> <p><code>/review</code> Provides a comprehensive review of a selected changeset, including analysis of changes, feedback on documentation, and overall score.</p> <p><code>/issues</code> Identifies potential issues within code, such as security vulnerabilities or logical errors, with suggestions for fixes upon request.</p> <p><code>/recap</code> Offers a detailed list of all changes in a selected changeset, categorizing modifications by file with links and descriptions.</p> <p><code>/update-changelog</code> Updates the project's changelog file with a summary of changes from the selected changeset, matching the style of existing entries if available.</p> <p><code>/find-on-github</code> Searches GitHub for open-source projects with similar code, providing links to relevant repositories.</p>"},{"location":"chat/commands/ask/","title":"/ask","text":""},{"location":"chat/commands/ask/#ask","title":"<code>/ask</code>","text":""},{"location":"chat/commands/ask/#description","title":"Description","text":"<p>Ask open questions about your code, useful to get a better understanding of the code and asking very detailed questions.</p>"},{"location":"chat/commands/ask/#how-to-use","title":"How to Use","text":"<p>To use the <code>/ask</code> command, follow these steps:</p> <ol> <li> <p>Select Your Focus: First, determine the focus in which you need assistance. Qodo Gen supports two main focuses for this command:</p> <ul> <li>Current File Focus: For queries related to a specific file, focusing on selected code or selected components.</li> <li>Git-Diff Focus: For queries concerning a changeset, including committed changes, local changes and staged changes.</li> </ul> </li> <li> <p>Initiate the Command: Type <code>/ask</code> followed by your question in the chat interface. Qodo Gen will process your query and return a response tailored to the context of your selected mode and focus.</p> </li> <li> <p>Continue the Chat: If you require further assistance or have additional questions, continue your conversation in the same chat. Qodo Gen will maintain the context of your initial query, providing tailored responses to your follow-up questions.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> <li> Git-Diff focus</li> </ul>"},{"location":"chat/commands/ask/#current-file-examples","title":"Current-File Examples","text":"<p>Objective Clarification - Local Changes</p> <p>Suspicious behavior analysis - Code Snippet</p> <p>Code Logic Explanation - Selected Component</p>"},{"location":"chat/commands/ask/#command","title":"Command:","text":"<p><code>/ask What is the primary goal of the changes introduced in the file?</code></p>"},{"location":"chat/commands/ask/#response","title":"Response:","text":"<p>The primary goal of the changes introduced in the file <code>autoscraper/auto_scraper.py</code> is to improve the performance and efficiency of the code. This is achieved through several modifications:</p> <ol> <li>The code now uses the <code>aiohttp</code> library, which is an asynchronous HTTP client/server framework for asyncio and Python. This allows for non-blocking socket operations, which can significantly improve the performance of the code when dealing with network operations.</li> <li>The <code>deque</code> data structure from the <code>collections</code> module is used instead of a list for <code>self.stack_list</code>. The <code>deque</code> data structure allows for efficient appends and pops from both ends of the container, which can be more performant than using a list in certain scenarios.</li> <li>The <code>api_key_requests</code> value has been changed from \"123456_abcdef\" to \"AF603KGLLLD550304GGHLD\". This could be due to a change in the API key used for making requests.</li> <li>The condition <code>if update is False</code>: has been simplified to <code>if not update</code>:. This is a more Pythonic way of checking if a variable is <code>False</code>.</li> <li>The code has been refactored to use a <code>with</code> statement when creating an <code>aiohttp.ClientSession()</code>. This ensures that the session is properly closed after it is no longer needed, which can help prevent resource leaks.</li> <li>The <code>for</code> loops have been restructured to use the <code>extend</code> method instead of the <code>+=</code> operator for adding elements to a list. This can be more efficient in terms of memory usage and performance.</li> <li>The list comprehension <code>[item.text for item in result_list]</code> has been replaced with the <code>map</code> function <code>list(map(lambda item: item.text, result_list))</code>. This could be a personal preference of the developer, as both methods achieve the same result However, using <code>map</code> can sometimes be faster than list comprehension, especially for larger lists.</li> </ol>"},{"location":"chat/commands/ask/#command_1","title":"Command:","text":"<p><code>/ask Why is this function returning an unexpected value?</code></p>"},{"location":"chat/commands/ask/#response_1","title":"Response:","text":"<p>The provided code for the <code>save</code> method appears to be incorrectly combining two distinct functionalities: saving data to a file and loading data from a file. This combination likely causes confusion about its purpose and functionality. The method starts by checking if the specified file path exists and raises an error if it does. It then serializes the <code>stack_list</code> attribute to JSON and writes it to the specified file path. However, immediately after writing the data, the method proceeds to read from the same file and attempts to load the data back into the <code>stack_list</code> attribute. This is not a typical behavior for a save method, as save operations usually only involve writing data to a file and not reading it back immediately.</p> <p>To correct this and ensure the method behaves as expected for a save operation, you should remove the loading part of the code. The corrected <code>save</code> method should look like this: </p><pre><code>def save(self, file_path):\n\"\"\"\nSerializes the stack_list as JSON and saves it to the disk.\n\nParameters\n----------\nfile_path: str\n    Path of the JSON output\n\nReturns\n-------\nNone\n\"\"\"\n\n    if os.path.exists(file_path):\n        raise ValueError(\"File path already exists\")\n\n    data = dict(stack_list=self.stack_list)\n    with open(file_path, \"w\") as f:\n        json.dump(data, f)\n</code></pre> This modification ensures that the <code>save</code> method only performs the save operation, aligning with the expected behavior. If you need functionality to load data from a file, it's best to implement it in a separate method, typically named something like <code>load</code>, to maintain clear separation of concerns and improve code readability."},{"location":"chat/commands/ask/#command_2","title":"Command:","text":"<p><code>/ask I'm unclear about the function logic. Could you explain the flow and expected outcomes?</code></p>"},{"location":"chat/commands/ask/#response_2","title":"Response:","text":"<p>The <code>_get_fuzzy_attrs</code> function is designed to modify the attributes of HTML elements to enable fuzzy matching based on a specified fuzziness ratio (<code>attr_fuzz_ratio</code>). Here's a breakdown of its logic and expected outcomes:</p> <ol> <li>Input Parameters:<ul> <li><code>attrs</code>: A dictionary of attributes (key-value pairs) of an HTML element.</li> <li><code>attr_fuzz_ratio</code>: A float value between 0 and 1 that specifies the threshold for fuzzy matching. A value of 1 means an exact match is required, while a value closer to 0 allows for more leniency in matching.</li> </ul> </li> <li>Function Logic:<ul> <li>The function first creates a copy of the <code>attrs</code> dictionary to avoid modifying the original input.</li> <li>It then iterates over each attribute in the <code>attrs</code> dictionary.<ul> <li>If the attribute value is a string and not empty (<code>val</code>), it wraps this value in a <code>FuzzyText</code> object, passing the value and the <code>attr_fuzz_ratio</code> to the <code>FuzzyText</code> constructor. This enables fuzzy matching for this attribute value based on the specified ratio.</li> <li>If the attribute value is a list or tuple, it iterates over each element in the collection. For each element that is not <code>None</code>, it creates a <code>FuzzyText</code> object with the element and <code>attr_fuzz_ratio</code>. This allows each element in the list or tuple to be matched fuzzily.</li> </ul> </li> <li>The modified attribute values (now potentially wrapped in <code>FuzzyText</code> objects) are assigned back to their respective keys in the <code>attrs</code> dictionary.</li> </ul> </li> <li>Expected Outcomes:<ul> <li>The function returns a modified version of the <code>attrs</code> dictionary where each attribute value is either a <code>FuzzyText</code> object (for string values or elements of list/tuple values) or remains unchanged (for None elements in lists/tuples).</li> <li>This modification enables the attributes to be matched against target values using fuzzy logic, where the degree of match is determined by the <code>attr_fuzz_ratio</code>. For example, if <code>attr_fuzz_ratio</code> is set to 0.8, then the attribute values only need to match the target values with at least 80% similarity.</li> </ul> </li> </ol> <p>In summary, <code>_get_fuzzy_attrs</code> prepares the attributes for fuzzy matching by wrapping string values and elements of list/tuple values in <code>FuzzyText</code> objects, allowing for more flexible and lenient matching based on the specified fuzziness ratio.</p>"},{"location":"chat/commands/ask/#git-diff-examples","title":"Git-Diff Examples","text":"<p>Performance Consideration - Committed Changes</p> <p>Architecture Alignment - Local Changes</p>"},{"location":"chat/commands/ask/#command_3","title":"Command:","text":"<p><code>/ask Are there any potential performance implications of the modifications in this pull request?</code></p>"},{"location":"chat/commands/ask/#response_3","title":"Response:","text":"<p>Yes, there are potential performance implications in the modifications of this pull request.</p> <ol> <li>The use of <code>aiohttp.ClientSession()</code> in the <code>autoscraper/auto_scraper.py</code> file introduces asynchronous HTTP requests. This can significantly improve the performance of the application if it is making multiple HTTP requests, as it allows the application to continue with other tasks while waiting for the HTTP requests to complete. However, it's important to note that the current implementation does not seem to take full advantage of the asynchronous capabilities, as no asynchronous tasks are being added to the <code>tasks</code> list and awaited.</li> <li>The change from using a list (<code>self.stack_list.append(stack)</code>) to a deque (<code>self.stack_list.appendleft(stack)</code>) for <code>self.stack_list</code> can also have performance implications. Deques provide O(1) time complexity for append and pop operations from both ends, while lists in Python offer O(1) time complexity for append and pop operations only from the right end. If there are operations that involve popping elements from the left end, using a deque would be more efficient.</li> <li>The change from list comprehension (<code>result_list = [item.text for item in result_list]</code>) to the <code>map</code> function (<code>result_list = list(map(lambda item: item.text, result_list))</code>) can have minor performance implications. In general, list comprehensions are known to be slightly faster than the <code>map</code> function in Python, especially for larger lists. However, the difference is usually negligible and would not significantly impact the overall performance of the application.</li> <li>The change from using the <code>+=</code> operator to the <code>extend</code> method for adding elements to a list can also have performance implications. The <code>extend</code> method is generally faster than the <code>+=</code> operator when adding multiple elements to a list, as it does not involve creating a new list and copying all elements.</li> </ol> <p>Overall, while some of these changes can potentially improve the performance of the application, others might have a negligible or slightly negative impact. The actual impact would depend on the specific use case and workload of the application.</p>"},{"location":"chat/commands/ask/#command_4","title":"Command:","text":"<p><code>/ask How do the changes in this changeset align with the overall architecture of the project?</code></p>"},{"location":"chat/commands/ask/#respomse","title":"Respomse:","text":"<p>The changes in this changeset seem to align well with the overall architecture of the project. The modifications are primarily focused on improving the efficiency and functionality of the auto_scraper.py file, which appears to be a key component of the project.</p> <ol> <li>The addition of <code>import aiohttp</code> and <code>from collections import deque</code> at the top of the file suggests that the project is moving towards asynchronous HTTP requests and efficient handling of data structures. This aligns with the overall architecture if the project is designed to handle large amounts of data or requires high performance.</li> <li>The change of the <code>api_key_requests</code> value in the <code>__init__</code> method might be a part of a larger shift in the project's API usage or a change in the API key itself.</li> <li>The replacement of <code>if update is False</code>: with <code>if not update</code>: is a more Pythonic way of checking if a variable is False. This change aligns with the project's architecture if it follows Python best practices.</li> <li>The restructuring of the loop that processes <code>wanted_dict</code> items is significant. The new code uses an <code>aiohttp.ClientSession()</code> which suggests that the project is moving towards asynchronous processing. This aligns with the project's architecture if it is designed to handle large amounts of data or requires high performance.</li> <li>The change from <code>append</code> to <code>appendleft</code> when adding to <code>self.stack_list</code> suggests a shift in how the data structure is being used. This could align with the project's architecture if it is designed to process items in a LIFO (Last In, First Out) manner.</li> <li>In the utils.py file, a new function <code>getAPIKey()</code> has been added. This could be part of a larger architectural change where API keys are managed in a centralized manner.</li> </ol> <p>Overall, these changes suggest a move towards more efficient data processing and better management of API keys, which would align well with a project that handles large amounts of data or makes extensive use of APIs.</p>"},{"location":"chat/commands/best-practices/","title":"/generate-best-practices","text":""},{"location":"chat/commands/best-practices/#generate-best-practices","title":"<code>/generate-best-practices</code>","text":""},{"location":"chat/commands/best-practices/#description","title":"Description","text":"<p>Best Practices helps your team follow coding guidelines by integrating them into Qodo Gen's suggestions. Use this feature to enforce consistency and quality across your project.</p> <p>Use the <code>/generate-best-practices</code> command to generate a <code>best_practices.md</code> file. This is a generic file automatically generated by Qodo Gen. You can modify or completely replace it to include the specific guidelines you want your team to follow.</p>"},{"location":"chat/commands/best-practices/#how-to-use","title":"How to Use","text":"<p>To use the <code>/generate-best-practices</code> command, follow these steps:</p> <ol> <li> <p>Select Your Focus: Before using this command, set a Focus. While the Focus does not influence the content of the generated <code>best_practices.md</code> file, Qodo Gen requires a Focus to be set in order to execute any command.</p> </li> <li> <p>Initiate the Command: Type <code>/best-practices</code> in the chat interface. Qodo Gen will process your request and generate coding best practices and guidelines.</p> </li> <li> <p>Copy the Response as Markdown: Click the three dots button in the top-right corner of Qodo Gen's response message, and select <code>Copy message as markdown</code>. Paste the markdown content into a new file named <code>best_practices.md</code>.</p> </li> <li> <p>Customize <code>best_practices.md</code>: Modify the content of <code>best_practices.md</code> as needed. You can add new best practices, modify existing ones, or remove parts to better suit your team's requirements. You can also ask Qodo Gen Chat to do that for you!</p> </li> </ol>"},{"location":"chat/commands/best-practices/#the-best_practicesmd-file","title":"The <code>best_practices.md</code> File","text":"<p>Qodo Gen automatically reads a <code>best_practices.md</code> file located at the root of your project directory. This file should contain guidelines and standards that your team should follow when coding.</p>"},{"location":"chat/commands/best-practices/#file-size-limit","title":"File Size Limit:","text":"<ul> <li>The best_practices.md file can contain up to 1,500 lines.</li> <li>If the file exceeds this limit, Qodo Gen will process only the first 1,500 lines and ignore the rest.</li> </ul>"},{"location":"chat/commands/best-practices/#example","title":"Example","text":"<p>Best Practices File Example</p> <pre><code># Qodo Gen Best Practices\n\n## General Code Structure\n\n- **Consistent Naming Conventions**: Use descriptive and consistent naming for variables, functions, and classes. For example, use camelCase for variables and functions, and PascalCase for class names.\n\n- **Documentation and Comments**: Ensure all functions, classes, and modules have comprehensive docstrings. Use the `/docstring` command to generate or improve documentation.\n\n- **Code Modularity**: Break down large functions into smaller, reusable components. This enhances readability and maintainability.\n\n## YAML Configuration\n\n- **Navigation Structure**: Organize navigation in YAML files using nested lists for hierarchical structures. Ensure each section is clearly defined and logically grouped.\n\n  ```yaml\n  nav: \n    - 'index.md'\n    - Installation:\n      - 'installation/index.md'\n      - 'installation/vscode.md'\n  ```\n\n- **Theme Customization**: Define custom themes and palettes in the YAML configuration to maintain a consistent look and feel across the documentation.\n\n  ```yaml\n  theme:\n    name: material\n    palette:\n      - media: \"(prefers-color-scheme: light)\"\n        scheme: default\n  ```\n\n## Markdown and Documentation\n\n- **Use of Admonitions**: Utilize admonitions for highlighting important information, such as tips, warnings, and examples. Use custom icons and colors to differentiate types.\n\n  ```markdown\n  !!! success \"Available in\"\n      - [:fontawesome-solid-file-code: Current File focus](../focus/current-file.md)\n  ```\n\n- **Image Integration**: Include images in documentation to enhance understanding. Use lazy loading for performance optimization.\n\n  ```markdown\n  ![example-image](./assets/example.png){loading=lazy}\n  ```\n\n- **Code Blocks**: Use fenced code blocks for syntax highlighting and clarity. Ensure code snippets are relevant and concise.\n\n  ```python\n  def example_function(param1, param2):\n      \"\"\"Example function with parameters.\"\"\"\n      return param1 + param2\n  ```\n\n## Python Scripting\n\n- **Error Handling**: Implement try-except blocks to handle exceptions gracefully. Log errors for debugging purposes.\n\n  ```python\n  try:\n      with open(file_path, 'r') as file:\n          content = file.read()\n  except FileNotFoundError as e:\n      print(f\"Error: {e}\")\n  ```\n\n- **Path Management**: Use `pathlib` for file and directory operations to ensure cross-platform compatibility.\n\n  ```python\n  from pathlib import Path\n\n  docs_path = Path(__file__).parent / \"docs\"\n  ```\n\n## GitHub Actions\n\n- **Workflow Configuration**: Define clear and concise workflows in `.yml` files. Use environment variables and secrets for sensitive information.\n\n  ```yaml\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Python\n          uses: actions/setup-python@v2\n  ```\n\n- **Branch Management**: Use descriptive branch names for feature development and bug fixes. Automate pull request creation and notifications.\n\n  ```yaml\n  - name: Create pull request\n    uses: actions/github-script@v6\n    with:\n      github-token: ${{ secrets.GITHUB_TOKEN }}\n  ```\n\n## Chat Commands\n\n- **Command Usage**: Use chat commands to automate repetitive tasks such as generating commit messages or describing changesets.\n\n  ```markdown\n  ### Command:\n  `/commit`\n  ```\n\n- **Focus Selection**: Select appropriate focus modes (e.g., Current File, Git-Diff) to tailor command responses to the relevant context.\n\n  ```markdown\n  - **Select Your Focus**: Choose between Current File or Git-Diff for contextually relevant responses.\n  ```\n\n## Test Generation\n\n- **Behavior Analysis**: Leverage behavior analysis to identify and categorize test scenarios. Use the advanced panel for managing test generation.\n\n  ```markdown\n  ## Behavior Categories\n  - **Happy Path**: Ideal and expected use cases.\n  - **Edge Case**: Unusual or extreme scenarios.\n  ```\n\n- **Test Refinement**: Continuously refine and customize generated tests to align with project requirements. Use example tests to guide style and consistency.\n\n  ```markdown\n  ## Refining Your Tests\n  - **Manual Editing**: Directly edit test code for quick adjustments.\n  ```\n\n## CSS Customization\n\n- **Custom Styles**: Define custom CSS rules for branding and visual consistency. Use CSS variables for easy theme adjustments.\n\n  ```css\n  :root {\n      --md-primary-fg-color: #765bfa;\n  }\n  ```\n\n- **Responsive Design**: Ensure styles are responsive and adapt to different screen sizes. Use grid layouts for flexible content arrangement.\n\n  ```css\n  .md-typeset .grid {\n      grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n  }\n  ```\n\nBy adhering to these best practices, you can maintain a consistent and high-quality codebase that is easy to understand, extend, and maintain.\n</code></pre>"},{"location":"chat/commands/commit/","title":"/commit","text":""},{"location":"chat/commands/commit/#commit","title":"<code>/commit</code>","text":""},{"location":"chat/commands/commit/#description","title":"Description","text":"<p>The <code>/commit</code> command streamlines the process of crafting commit messages for your staged changes. Available in Git-Diff Focus, this command analyzes your staged changes and generates a comprehensive commit message that succinctly describes all modifications. For added convenience, Qodo Gen integrates an \"Auto commit message\" button within the source control panel of the IDE, offering an alternative method to directly apply the generated message to the commit field.</p>"},{"location":"chat/commands/commit/#how-to-use","title":"How to Use","text":"<p>To utilize the <code>/commit</code> command effectively, follow these steps:</p> <ol> <li> <p>Select Git-Diff Focus: The <code>/commit</code> command operates in Git-Diff, catering to changes made across multiple files within your project's workspace.</p> </li> <li> <p>Ensure Changes are Staged: Before initiating the command, confirm that all changes you wish to include in your commit message are correctly staged.</p> </li> <li> <p>Initiate the Command: Type <code>/commit</code> in the chat interface. Qodo Gen will analyze the staged changes and generate a detailed commit message reflecting the modifications.</p> </li> <li> <p>Copy and Paste the Commit Message: Review the generated commit message provided by Qodo Gen. You can copy this message and manually paste it into the commit message field in your source control panel.</p> <p>Alternatively, use the Auto commit message button directly in the source control panel of your IDE. This button performs the same action, automatically inserting the generated commit message into the commit field, streamlining the process.</p> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Commit message using Chat</p> <p></p> <ul> <li>User: Chooses Staged Changes mode</li> <li>Command: <code>/commit</code></li> </ul> <p>Commit message from Source Control panel</p> VSCodeJetBrains <p></p> <p></p> <ul> <li>User: Clicks on Auto Commit Message in Source Control panel</li> </ul>"},{"location":"chat/commands/describe/","title":"/describe","text":""},{"location":"chat/commands/describe/#describe","title":"<code>/describe</code>","text":""},{"location":"chat/commands/describe/#description","title":"Description","text":"<p>The <code>/describe</code> command in Qodo Gen is designed to streamline the process of preparing pull requests (PRs) and understanding changes within your workspace. By invoking this command with a focus on selected changes (local, staged, or committed), Qodo Gen generates a structured description of the changeset. This includes a title, type of changes (e.g., bug fix, feature addition, performance improvement), and a detailed description. This functionality is particularly useful for developers looking to summarize their work before opening a PR, ensuring that colleagues and contributors can quickly grasp the intent and scope of the changes.</p>"},{"location":"chat/commands/describe/#how-to-use","title":"How to Use","text":"<p>To utilize the <code>/describe</code> command effectively, follow these steps:</p> <ol> <li> <p>Select Your Changeset: Identify the scope by selecting file, local, staged, or committed changes. </p> </li> <li> <p>Select Target Branch (for committed changes): If your focus is on reviewing committed changes, you must select the target branch to which your current working branch will be compared. This step is crucial for understanding the context and impact of the changes within the broader project scope. For local or staged changes, proceed directly to initiating the command as these do not require a target branch selection.</p> </li> <li> <p>Initiate the Command: Type <code>/describe</code> in the chat interface. Qodo Gen then processes your selected changes and compiles a structured description, including a suggested title, the type of changes made, and a comprehensive description of the changeset.</p> </li> <li> <p>Review and Use the Description: Review the generated description for accuracy and completeness. You can then use this structured summary directly in your Git PR, facilitating clear communication and efficient collaboration with your team.</p> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Features + Bug fixed PR Description</p> <p>New feature PR Description</p> <p>PR Description with additional instructions</p>"},{"location":"chat/commands/describe/#command","title":"Command:","text":"<p><code>/describe</code></p>"},{"location":"chat/commands/describe/#response","title":"Response:","text":"<ul> <li>Title: \"Feature Addition and Bug Fixes in User Authentication Flow\"</li> <li>Type: <code>Feature</code>, <code>Bug Fix</code></li> <li>Description: Introduces a new two-factor authentication feature to enhance security during user login. Additionally, it addresses previously reported bugs in the password reset flow, including error handling and email verification. These changes improve the overall reliability and security of the authentication process.</li> </ul>"},{"location":"chat/commands/describe/#command_1","title":"Command:","text":"<p><code>/describe</code></p>"},{"location":"chat/commands/describe/#response_1","title":"Response:","text":"<ul> <li>Title: \"Implement Feature X\"</li> <li>Type: <code>Feature</code></li> <li>Description: This pull request introduces a new middleware for user authentication. The middleware validates user credentials against the authentication service and grants access if authentication is successful. It enhances the security of our application by adding a layer of protection to routes that require user authentication.</li> </ul>"},{"location":"chat/commands/describe/#command_2","title":"Command:","text":"<p><code>/describe and use these sub-headings in the description i.e. Nature of change, Change Score and Test suite added</code></p>"},{"location":"chat/commands/describe/#response_2","title":"Response:","text":"<ul> <li>Title: \"Implement User Authentication Middleware\" </li> <li>Type: <code>Feature</code></li> <li>Description: This pull request introduces a new middleware for user authentication. The middleware validates user credentials against the authentication service and grants access if authentication is successful.<ul> <li>Nature of change: It enhances the security of our application by adding an additional layer of protection to routes that require user authentication.</li> <li>Change Score: The change score is high.</li> <li>Test suite added: No test suite has been added with this change.</li> </ul> </li> </ul>"},{"location":"chat/commands/docstring/","title":"/docstring","text":""},{"location":"chat/commands/docstring/#docstring","title":"<code>/docstring</code>","text":""},{"location":"chat/commands/docstring/#description","title":"Description","text":"<p>Automatically generate or improve docstrings for your code, enhancing documentation quality and maintainability. The <code>/docstring</code> command is designed to aid in creating comprehensive, clear, and consistent docstrings for functions, classes, and modules, following best documentation practices.</p>"},{"location":"chat/commands/docstring/#how-to-use","title":"How to Use","text":"<p>To use the <code>/docstring</code> command, follow these steps:</p> <ol> <li> <p>Select Your Mode: Choose the appropriate context for adding or improving docstrings. Qodo Gen supports this command in two modes:</p> <ul> <li>Current File Focus: For generating or refining docstrings within a specific file, focusing on individual functions, classes, or entire files.</li> <li>Git-Diff Focus: For a broader approach, encompassing multiple files within your changeset to ensure consistent documentation across your project.</li> </ul> </li> <li> <p>Select Your Focus: Identify the code segment or entire file for which you wish to generate or enhance the docstring. </p> </li> <li> <p>Initiate the Command: Type <code>/docstring</code> followed by an optional specific instruction or leave it blank for general docstring generation. Qodo Gen will analyze the selected code and generate a suitable docstring or suggest improvements to existing documentation.</p> </li> <li> <p>Review and Apply: Evaluate the suggested docstring provided by Qodo Gen. You can directly apply the changes with a single click or edit the suggestion to better fit your requirements before applying.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> <li> Git-Diff focus</li> </ul> <p>Docsctring for component (Current File Focus)</p> <p>Docstring for Changeset (Git-Diff Focus)</p>"},{"location":"chat/commands/docstring/#commands","title":"Commands:","text":"<p><code>/docstring</code></p>"},{"location":"chat/commands/docstring/#response","title":"Response:","text":""},{"location":"chat/commands/docstring/#commands_1","title":"Commands:","text":"<p><code>/docstring enhance readability</code></p>"},{"location":"chat/commands/docstring/#response_1","title":"Response:","text":""},{"location":"chat/commands/enhance/","title":"/enhance","text":""},{"location":"chat/commands/enhance/#enhance","title":"<code>/enhance</code>","text":""},{"location":"chat/commands/enhance/#description","title":"Description","text":"<p>Use <code>/enhance</code> command to get suggestions for code enhancements. Qodo Gen analyzes your code and provides recommendations to enhance the quality, maintainability, and performance of your code. This includes improving code readability, adhering to best practices, beautifying code, adding type hints, and enhancing documentation. </p>"},{"location":"chat/commands/enhance/#how-to-use","title":"How to Use","text":"<p>To use the <code>/enhance</code> command, follow these steps:</p> <ol> <li> <p>Select Current File Focus: The <code>/enhance</code> command is available in Current File Focus, tailored for targeted code enhancement within a specific file. </p> </li> <li> <p>Select Your Secondary Focus: Choose the segment of code you wish to enhance. This precise selection ensures that Qodo Gen provides relevant and actionable suggestions for improving your code.</p> </li> <li> <p>Initiate the Command: Type <code>/enhance</code> in the chat interface. Qodo Gen will analyze the selected code segment and return a set of enhancement suggestions.</p> </li> <li> <p>Review and Apply: Qodo Gen will generate a diff view with all enhancment suggestions. Review these suggestions and apply them directly to your code with ease. You have the option to accept all recommendations, apply them selectively, or modify them to better suit your needs before implementation.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/enhance/#commands","title":"Commands:","text":"<p><code>/enhance</code></p>"},{"location":"chat/commands/enhance/#response","title":"Response:","text":""},{"location":"chat/commands/explain/","title":"/explain","text":""},{"location":"chat/commands/explain/#explain","title":"<code>/explain</code>","text":""},{"location":"chat/commands/explain/#description","title":"Description","text":"<p>The <code>/explain</code> command is designed to provide detailed explanations and insights of your codebase. It is useful for understanding complex or unfamiliar code, identifying potential issues, and gaining a deeper understanding of the logic behind your project. This includes a detailed description of the selected code, inputs and outputs, code flow, and examples of usage. </p>"},{"location":"chat/commands/explain/#how-to-use","title":"How to Use","text":"<p>Follow these steps to leverage the <code>/explain</code> command effectively:</p> <ol> <li> <p>Select Current File Focus: The <code>/explain</code> command is exclusively available in Current File Focus, focusing on providing detailed explanations for specific code segments within a single file.</p> </li> <li> <p>Select Your Secondary Focus: Identify the piece of code you need elucidation on. This selection ensures that Qodo Gen tailors the explanation to the relevant code segment, offering precise and actionable insights.</p> </li> <li> <p>Initiate the Command: Type <code>/explain</code> into the chat interface after selecting your code. Qodo Gen will then process the selected segment and generate a structured explanation.</p> </li> <li> <p>Review the Explanation: Qodo Gen provides a comprehensive breakdown of the selected code, covering aspects such as:</p> <ul> <li>A general description of what the code does.</li> <li>Inputs and outputs, detailing the data the code segment receives and produces.</li> <li>The code flow, outlining the execution path within the code.</li> <li>Example of usage, showing how the code can be used in real-world scenarios.</li> </ul> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/explain/#command","title":"Command:","text":"<p><code>/explain</code></p>"},{"location":"chat/commands/explain/#response","title":"Response:","text":"<p>The <code>get_file_patch_info</code> function extracts information about a file patch from a given patch string. It takes two inputs: <code>patch_str</code>, which is the patch string, and <code>file_name</code>, which is the name of the file. The function returns a <code>FilePatchInfo</code> object that contains information about the file patch.</p> <p></p>Inputs - <code>patch_str</code> (str): The patch string. - <code>file_name</code> (str): The name of the file. <p></p>Flow 1. Split the patch string into lines. 2. Define a regular expression pattern to match the hunk header of the patch. 3. Initialize variables <code>start1</code>, <code>size1</code>, <code>start2</code>, and <code>size2</code> to -1. 4. Iterate over each line in the patch lines. 5. If a line starts with <code>@@</code>, match it against the hunk header pattern. 6. If a match is found, extract the start and size values for the original and modified file. 7. If the match is in the format <code>@@ -0,0 +1 @@</code>, handle it separately. 8. Break the loop after finding the first hunk header match. 9. Create a <code>FilePatchInfo</code> object with the extracted information and return it. <p></p>Outputs - <code>FilePatchInfo</code>: A FilePatchInfo object containing information about the file patch. <p></p>Usage example <pre><code>patch_str = \"@@ -10,5 +10,7 @@\\n some patch lines \\n\"\nfile_name = \"example.txt\"\npatch_info = get_file_patch_info(patch_str, file_name)\nprint(patch_info.start1)  # Output: 10\nprint(patch_info.size1)  # Output: 5\nprint(patch_info.start2)  # Output: 10\nprint(patch_info.size2)  # Output: 7\n</code></pre>"},{"location":"chat/commands/find-on-github/","title":"/find-on-github","text":""},{"location":"chat/commands/find-on-github/#find-on-github","title":"<code>/find-on-github</code>","text":""},{"location":"chat/commands/find-on-github/#description","title":"Description","text":"<p>The <code>/find-on-github</code> command connects your development environment to the vast world of open-source projects on GitHub. By selecting a segment of code, you can use this command to search for similar code across GitHub repositories. Qodo Gen efficiently scans open-source projects, providing you with links to repositories that contain code akin to your selection. This feature is invaluable for discovering how similar challenges are addressed in other projects, learning new coding practices, or finding potential libraries to integrate into your project.</p>"},{"location":"chat/commands/find-on-github/#how-to-use","title":"How to Use","text":"<p>Leverage the <code>/find-on-github</code> command by following these steps:</p> <ol> <li> <p>Select Current File Focus: The <code>/find-on-github</code> command is available in Current File Focus, focusing on finding similarities for specific code segments within single files.</p> </li> <li> <p>Select Your Secondary Focus: Highlight the code segment you're interested in comparing with open-source projects on GitHub. This targeted approach ensures the search results are relevant to your specific code context.</p> </li> <li> <p>Initiate the Command: Type <code>/find-on-github</code> in the chat interface after selecting your code. Qodo Gen then processes your request by searching GitHub for similar code snippets or implementations.</p> </li> <li> <p>Review the Results: Qodo Gen provides a list of links to GitHub repositories that contain similar code. These links are directly accessible from the chat interface, allowing you to quickly explore the findings.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/find-on-github/#command","title":"Command:","text":"<p><code>/find-on-github</code> </p>"},{"location":"chat/commands/find-on-github/#response","title":"Response:","text":""},{"location":"chat/commands/improve/","title":"/improve","text":""},{"location":"chat/commands/improve/#improve","title":"<code>/improve</code>","text":""},{"location":"chat/commands/improve/#description","title":"Description","text":"<p>The <code>/improve</code> command is designed to delve into the deeper aspects of your code, providing insights and recommendations for improving code quality, maintainability, and performance. Qodo Gen analyzes your codebase to identify areas that require attention or enhancement, such as otential issues such as bugs, security vulnerabilities, performance bottlenecks, and readability concerns. Unlike the <code>/enhance</code> command, <code>/improve</code> focuses on more substantial improvements, aiming to bolster the overall integrity and efficiency of your codebase.</p>"},{"location":"chat/commands/improve/#how-to-use","title":"How to Use","text":"<p>To utilize the <code>/improve</code> command, follow these instructions:</p> <ol> <li> <p>Select Your Mode: This command is versatile, available in all types of focuses. Choose the focus that best fits the scope of improvements you're aiming for:</p> <ul> <li>Current File Focus: Targets specific files for detailed code improvement suggestions.</li> <li>Git-Diff Focus: Expands the improvement suggestions across multiple files within your changeset, ideal for pre Pull Request enhancements.</li> </ul> </li> <li> <p>Select Your Focus: Pinpoint the code segments or files you're looking to improve. Your selection will guide Qodo Gen in generating precise and actionable suggestions.</p> </li> <li> <p>Initiate the Command: Type <code>/improve</code> into the chat interface. Qodo Gen will analyze the chosen code, identifying a range of improvement opportunities classified by type, such as potential issues, security concerns, vulnerabilities, performance enhancements, or readability improvements.</p> </li> <li> <p>Review and Choose: Qodo Gen presents a list of categorized suggestions for your review. Select the suggestions you want to implement to see a diff view highlighting the proposed changes to your code.</p> </li> <li> <p>Refactor and Apply: After reviewing the suggestions and their associated diff views, click the \"refactor\" button to apply the chosen improvements directly. This streamlined process allows you to efficiently enhance your code's quality with minimal effort.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> <li> Git-Diff focus</li> </ul> <p>Current File Focus example</p> <p>Git-Diff Focus Example</p>"},{"location":"chat/commands/improve/#command","title":"Command:","text":"<p><code>/improve</code></p>"},{"location":"chat/commands/improve/#response","title":"Response:","text":""},{"location":"chat/commands/improve/#command_1","title":"Command:","text":"<p><code>/improve</code></p>"},{"location":"chat/commands/improve/#response_1","title":"Response:","text":""},{"location":"chat/commands/issues/","title":"/issues","text":""},{"location":"chat/commands/issues/#issues","title":"<code>/issues</code>","text":""},{"location":"chat/commands/issues/#description","title":"Description","text":"<p>The <code>/issues</code> command in Qodo Gen is engineered to enhance code quality and security by identifying potential issues within your codebase. Available in Git-Diff Focus, this command scrutinizes your code for a variety of issues, such as security vulnerabilities, logical errors, debugging remnants, and more. Each identified issue is accompanied by a tag indicating its type, a direct link to the implicated code, and a detailed description of the problem. This feature is essential for preemptively addressing problems that could compromise your project's integrity or performance.</p>"},{"location":"chat/commands/issues/#how-to-use","title":"How to Use","text":"<p>Follow these steps to efficiently utilize the <code>/issues</code> command:</p> <ol> <li> <p>Select Your Changeset: Identify the scope by selecting file, local, staged, or committed changes. </p> </li> <li> <p>Select Target Branch (for committed changes): If your focus is on committed changes, you must select the target branch to which your current working branch will be compared. For local or staged changes, proceed directly to initiating the command as these do not require a target branch selection.</p> </li> <li> <p>Initiate the Command: Type <code>/issues</code> in the chat interface. Qodo Gen then proceeds to analyze the selected scope\u2014either the entire changeset (loca, stages or committed changes) or the specified changes in a file\u2014for potential issues.</p> </li> <li> <p>Review Identified Issues: Qodo Gen presents a list of found issues, each tagged with its type (e.g., Security Concern, Potential Issue, Leftover Debugging Code, Misspelled Variable). Alongside each issue is a link to the relevant code and a comprehensive description of the problem, enabling you to quickly grasp and locate the concern.</p> </li> <li> <p>Continue the Chat for Fixes: If you wish to receive suggestions for fixing the identified issues, you can continue the chat directly from the issues list. Ask Qodo Gen for specific advice on how to address each concern. Qodo Gen will provide tailored suggestions for resolving the problems, enhancing the security and quality of your code.</p> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/issues/#command","title":"Command:","text":"<p><code>/issues</code></p>"},{"location":"chat/commands/issues/#response","title":"Response:","text":""},{"location":"chat/commands/quick-test/","title":"/quick-test","text":""},{"location":"chat/commands/quick-test/#quick-test","title":"<code>/quick-test</code>","text":""},{"location":"chat/commands/quick-test/#description","title":"Description","text":"<p>The <code>/quick-test</code> command initiates an iterative and interactive mode for generating test suites for your code. Unlike the comprehensive approach of the <code>/test-suite</code> command, <code>/quick-test</code> focuses on quickly producing a basic set of tests covering key behaviors. Users can fine-tune the generated tests through a natural language chat, allowing for precise customization until the desired test suite is achieved.</p>"},{"location":"chat/commands/quick-test/#how-to-use","title":"How to Use","text":"<p>To efficiently use the <code>/quick-test</code> command, follow these steps:</p> <ol> <li> <p>Select Current File Focus: Available exclusively in Current File Focus, <code>/quick-test</code> is designed to provide rapid test generation for specific segments of code within a single file.</p> </li> <li> <p>Select Your Secondary Focus: Identify the code segment you wish to test. This selection is crucial for ensuring that the generated tests are relevant and targeted.</p> </li> <li> <p>Initiate the Command: Type <code>/quick-test</code> in the chat interface. Qodo Gen then analyzes the selected code segment and generates a few behaviors, which are printed in the chat interface along with the initial test suite covering these behaviors. This quick generation aims to give you an immediate understanding of what aspects of the code are being tested. If you require additional behaviors to be tested, you can request more directly in the current chat. Qodo Gen will maintain the context of your initial query, providing tailored responses to your follow-up questions.</p> </li> <li> <p>Refine the Test Suite: Engage in a conversation with Qodo Gen to specify adjustments to the test suite. This can include requests for testing additional behaviors, modifying existing tests, or clarifying the logic behind certain tests. Qodo Gen responds iteratively, refining the test suite according to your directions and feedback.</p> </li> <li> <p>Finalize Your Test Suite: Continue this interactive refinement until the test suite satisfactorily covers all desired behaviors and test scenarios. This step concludes the process, ensuring the final test suite is comprehensive and tailored to your specific testing goals.</p> </li> </ol> <p>Available in</p> <ul> <li> Current File focus</li> </ul> <p>Example</p> <p></p> <ul> <li>User: Chooses a code without tests</li> <li>Command: <code>/quick-test</code></li> </ul>"},{"location":"chat/commands/recap/","title":"/recap","text":""},{"location":"chat/commands/recap/#recap","title":"<code>/recap</code>","text":""},{"location":"chat/commands/recap/#description","title":"Description","text":"<p>The <code>/recap</code> command in Qodo Gen is designed for developers seeking a comprehensive overview of modifications within a selected changeset, be it file, local, staged, or committed changes. This command meticulously lists all changes, organizing them by modified file. Each change is annotated with a tag indicating the type of modification, a link to the affected code, and a detailed description of what was altered. This command is invaluable for code review, documentation, and ensuring a clear understanding of the work done or the changes made before moving forward with commits, merges, or deployments.</p>"},{"location":"chat/commands/recap/#how-to-use","title":"How to Use","text":"<p>To effectively utilize the <code>/recap</code> command, adhere to the following steps:</p> <ol> <li> <p>Select Your Changeset: Identify the scope of your recap by selecting file, local, staged, or committed changes. This focus directs Qodo Gen to compile a detailed account of modifications relevant to your current review or documentation needs.</p> </li> <li> <p>Select Target Branch (for committed changes): If your focus is on committed changes, you must select the target branch to which your current working branch will be compared. For local or staged changes, proceed directly to initiating the command as these do not require a target branch selection.</p> </li> <li> <p>Initiate the Command: Type <code>/recap</code> into the chat interface. Qodo Gen will process the specified changeset and generate a structured list of all changes made, categorized by file.</p> </li> <li> <p>Review the Recap: Each file listed in the recap will include:</p> <ul> <li>Type of Change: The type of the modification (e.g., Enhancement, Refactor, Bug fix).</li> <li>Link to Code: A direct link to the modified code, facilitating easy access and review.</li> <li>Description of Changes: A clear, concise description of what was changed in the code, providing context and understanding at a glance.</li> </ul> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/recap/#command","title":"Command:","text":"<p><code>/recap</code></p>"},{"location":"chat/commands/recap/#response","title":"Response:","text":""},{"location":"chat/commands/review/","title":"/review","text":""},{"location":"chat/commands/review/#review","title":"<code>/review</code>","text":""},{"location":"chat/commands/review/#description","title":"Description","text":"<p>The <code>/review</code> command in Qodo Gen is designed to facilitate the code review process by providing a comprehensive analysis of selected changesets (local, staged, or committed changes). This automated review includes an assessment of the main theme, labels, and summary of the changes, along with evaluations on the addition of relevant tests, effort estimation for the review process, and a final score. Additionally, it offers general suggestions for improvement, notes on security concerns, and feedback on the documentation. This command is invaluable for streamlining reviews and ensuring high-quality contributions.</p>"},{"location":"chat/commands/review/#how-to-use","title":"How to Use","text":"<p>To make the most out of the <code>/review</code> command, follow these steps:</p> <ol> <li> <p>Select Your Changeset: Identify the scope by selecting file, local, staged, or committed changes. </p> </li> <li> <p>Select Target Branch (for committed changes): If your focus is on reviewing committed changes, you must select the target branch to which your current working branch will be compared. This step is crucial for understanding the context and impact of the changes within the broader project scope. For local or staged changes, proceed directly to initiating the command as these do not require a target branch selection.</p> </li> <li> <p>Initiate the Command: Enter <code>/review</code> in the chat interface. Qodo Gen then processes the selected changeset, providing a detailed review that encompasses several key aspects of code quality and readiness.</p> </li> <li> <p>Analyze the Review: Qodo Gen's review includes:</p> <ul> <li>Changes Analysis: An overview of the main theme, labels, and a summary of the changes.</li> <li>Relevant Tests Added: A yes/no indication of whether the changeset includes associated tests.</li> <li>Estimated Effort to Review: A scale rating from 1 to 5 indicating the expected complexity and time investment required for a thorough review.</li> <li>Changes Feedback: General suggestions for improvement, potential security concerns, and a final changes score reflecting the overall quality and completeness of the submission.</li> </ul> </li> <li> <p>Apply Feedback: Use the insights and recommendations provided by Qodo Gen to refine your changes before finalizing your pull request or code integration.</p> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Example - Committed changes</p> <p></p>Changes Analysis <p>\ud83c\udfaf Main theme:</p> <p>The main theme of the changes is to add new functionality for processing git patches. Two new functions have been added: <code>get_file_patch_info</code> and <code>get_edit_type</code>.</p> <p>Changes labels: Enhancement</p> <p>Changes summary:</p> <p>The changes introduce two new functions to the <code>git_patch_processing.py</code> file. The <code>get_file_patch_info</code> function extracts information about a file patch from a given patch string. The <code>get_edit_type</code> function determines the type of edit (addition, deletion, or modification) represented by a given patch string.</p> <p>\ud83e\uddea Relevant tests added: No</p> <p>\u23f1\ufe0f Estimated effort to review [1-5]: 3, the changes are not too complex but they do add significant new functionality which needs to be thoroughly reviewed.</p> <p></p>Changes Feedback <p>\ud83d\udca1 General suggestions:</p> <p>The code looks well-structured and follows good practices. However, it would be beneficial to add tests for these new functions to ensure they work as expected. Also, in the get_file_patch_info function, the exception handling could be improved. Instead of a broad except clause, it would be better to catch specific exceptions.</p> <p>\ud83d\udd12 Security concerns: No</p> <p>Changes Score: 85</p> <ul> <li>User: Selects committed changes from current branch with target branch <code>main</code></li> <li>Command: <code>/review</code></li> </ul>"},{"location":"chat/commands/test-suite/","title":"/test-suite","text":""},{"location":"chat/commands/test-suite/#test-suite","title":"<code>/test-suite</code>","text":""},{"location":"chat/commands/test-suite/#description","title":"Description","text":"<p>The <code>/test-suite</code> command streamlines the process of creating comprehensive test suites for your code. By simply selecting the code segment you wish to test, Qodo Gen automatically generates a robust test suite within its advanced panel. </p>"},{"location":"chat/commands/test-suite/#how-to-use","title":"How to Use","text":"<p>Implementing the <code>/test-suite</code> command involves a few straightforward steps:</p> <ol> <li> <p>Select Current File Focus: The <code>/test-suite</code> command is designed to operate within Current File Focus, allowing you to generate test suites for specific code segments or entire files.</p> </li> <li> <p>Select Your Secondary Focus: Choose the code for which you want to create a test suite. Precise selection ensures the generated tests are relevant and cover the selected code adequately.</p> </li> <li> <p>Initiate the Command: Type <code>/test-suite</code> followed by any free text in the chat interface. This free text will be added to the general instructions field of the advanced panel, providing context or specific directions for the test suite generation. Upon execution, Qodo Gen opens the advanced panel where the test suite generation process takes place.</p> <p>Example: <code>/test-suite Use 'Given, When, Then' style</code></p> <p>In this example, \" Use 'Given, When, Then' style\" is added to the general instructions field, guiding the generation of each test case in a specific style.</p> </li> <li> <p>Review and Customize the Test Suite: The advanced panel will display the generated test suite, including your free text instructions. Here, you have the opportunity to review and adjust the test suite and instructions according to your project's specific needs.</p> </li> </ol> <p>Read more about Test Generation with Qodo Gen</p> <p>Available in</p> <ul> <li> Current File focus</li> </ul> <p>Example</p> <p>Example with General Instructions</p>"},{"location":"chat/commands/test-suite/#command","title":"Command:","text":"<p><code>/test-suite</code></p>"},{"location":"chat/commands/test-suite/#response","title":"Response:","text":""},{"location":"chat/commands/test-suite/#command_1","title":"Command:","text":"<p><code>/test-suite  use Arrange, Act, Assert style</code></p>"},{"location":"chat/commands/test-suite/#response_1","title":"Response:","text":""},{"location":"chat/commands/update-changelog/","title":"/changelog","text":""},{"location":"chat/commands/update-changelog/#changelog","title":"<code>/changelog</code>","text":""},{"location":"chat/commands/update-changelog/#description","title":"Description","text":"<p>The <code>/changelog</code> command in Qodo Gen is a powerful tool for maintaining an up-to-date and detailed record of changes within your project. Aimed at enhancing project documentation, this command automates the process of updating your changelog file. By analyzing a selected changeset (local, staged, or committed changes), Qodo Gen generates a structured changelog text summarizing the modifications. If an existing changelog file is detected in the project, Qodo Gen uses it as a reference to match the style and formatting of the update, ensuring consistency across documentation.</p>"},{"location":"chat/commands/update-changelog/#how-to-use","title":"How to Use","text":"<p>Follow these steps to seamlessly update your changelog using the <code>/changelog</code> command:</p> <ol> <li> <p>Select Your Changeset: Choose the changes you wish to document in the changelog\u2014whether they are local, staged, or committed. This selection will guide the generation of the changelog content, tailoring it to reflect the specific updates made during the chosen period.</p> </li> <li> <p>Select Target Branch (for committed changes): If your focus is on committed changes, you must select the target branch to which your current working branch will be compared. For local or staged changes, proceed directly to initiating the command as these do not require a target branch selection.</p> </li> <li> <p>Initiate the Command: Type <code>/changelog</code> in the chat interface. Qodo Gen then examines the selected changeset, drafting a structured changelog entry that encapsulates the essence of the modifications.</p> </li> <li> <p>Review and Implement the Update: Qodo Gen presents the proposed changelog update, formatted in line with any existing changelog documentation within the project. You can review this summary for accuracy and completeness before integrating it into your changelog file, ensuring that project stakeholders are kept informed of the latest developments.</p> </li> </ol> <p>Available in</p> <ul> <li> Git-Diff focus</li> </ul> <p>Example</p>"},{"location":"chat/commands/update-changelog/#command","title":"Command:","text":"<p><code>/changelog</code></p>"},{"location":"chat/commands/update-changelog/#response","title":"Response:","text":"<p>[2024-04-08]</p> <p>Added</p> <ul> <li>Introduced aiohttp and collections.deque for asynchronous operations and efficient stack management.</li> <li>Added a new utility function to retrieve API keys.</li> </ul> <p>Changed</p> <ul> <li>Updated the API key in auto_scraper.py to a new value.</li> <li>Refactored the result processing logic in auto_scraper.py to use asynchronous requests and deque for stack management.</li> <li>Simplified the conditional check for the update parameter in auto_scraper.py.</li> </ul>"},{"location":"chat/focus/","title":"Introduction to Focus Selection","text":""},{"location":"chat/focus/#introduction-to-focus-selection","title":"Introduction to Focus Selection","text":"<p>Qodo Gen offers a versatile range of focuses to address various coding needs and scenarios, thereby enhancing your development experience through tailored support. Each focus is meticulously designed to harness Qodo Gen's capabilities, targeting specific aspects of your coding projects\u2014from general coding queries to in-depth code analysis and documentation. Familiarizing yourself with these focuses will enable you to leverage Qodo Gen more effectively, ensuring you receive the most pertinent assistance precisely when you need it.</p>"},{"location":"chat/focus/#focus-options","title":"Focus Options","text":"<ul> <li> <p>Current File: Focuses on the current file you're working on, allowing you to send selected code to Qodo Gen for detailed analysis and assistance. Offers two focus options (Selected Lines, Selected Component) to refine the context for Qodo Gen's responses. Supports a variety of commands tailored to enhancing your code within the scope of the selected file.</p> </li> <li> <p>Git Diff: Expands Qodo Gen's focus to encompass changes across your entire project workspace, enabling you to manage and review code changes effectively. This mode provides insights into local, staged, or committed changes. Git-Diff supports commands for managing commits, documentation, code quality, and more.</p> </li> </ul>"},{"location":"chat/focus/#selecting-a-focus","title":"Selecting a Focus","text":"<ol> <li>Add Focus: Within Qodo Gen chat, click on the <code>@</code> button, or type <code>@</code> in the chat and use the keyboard arrows.</li> <li>Choose Your Focus: Select the focus that best fits your current coding task or question. Consider the scope of your query and whether it pertains to general coding knowledge, specific code files, or broader project changes.</li> <li>Switch Focus as Needed: You can switch the focus at any time based on the evolving needs of your development work. Qodo Gen seamlessly adapts to the selected focus, providing contextually relevant assistance.</li> </ol>"},{"location":"chat/focus/current-file/","title":"Current File","text":""},{"location":"chat/focus/current-file/#current-file","title":"Current File","text":""},{"location":"chat/focus/current-file/#overview","title":"Overview","text":"<p>Focus on Current File in Qodo Gen enhances your coding experience by concentrating on the file you're currently working on. This focus allows you to send selected portions of your code to the model, ensuring the responses are contextually relevant to your specific codebase. With two focus options available via a dropdown menu, Focus on Current File adapts to your needs, whether you're examining specific lines or a desired components.</p>"},{"location":"chat/focus/current-file/#focus-options","title":"Focus Options","text":"<ol> <li>Selected Lines: Manually select lines in your code to set as the focus for your request.</li> <li>Selected Component: Choose a function, class, or method from the focus list to concentrate on that particular component.</li> </ol>"},{"location":"chat/focus/current-file/#commands","title":"Commands","text":"<p>In Current File Focus you can utilize the following commands:</p> <ul> <li><code>/ask</code>: Pose queries about specific code issues or seek advice on coding practices, enhancing your understanding and coding skills.</li> <li><code>/docstring</code>: Automatically generates or improves docstrings for your functions, classes, or methods, helping to document your code more effectively.</li> <li><code>/enhance</code>: Suggests enhancements for your code, such as improving readability, following best practices, and beautifying the code structure.</li> <li><code>/explain</code>: Offers detailed explanations of your selected code, including insights into its functionality, inputs, outputs, and examples of use.</li> <li><code>/improve</code>: Identifies and suggests fixes for potential issues within your code, such as bugs, security concerns, or performance optimizations.</li> <li><code>/find-on-github</code>: Searches GitHub for open-source projects with similar code, providing insights and examples from the wider coding community.</li> <li><code>/test-suite</code>: Generates a comprehensive test suite for your selected code, aiding in the development of robust and reliable software.</li> <li><code>/quick-test</code>: Quickly creates an initial set of tests for your code, allowing for immediate feedback and iterative improvement through conversation.</li> </ul>"},{"location":"chat/focus/current-file/#how-to-focus-on-current-file","title":"How to focus on Current File","text":"<ol> <li>Add Focus: Within Qodo Gen chat, click on the <code>@</code> button, or type <code>@</code> in the chat and use the keyboard arrows, and choose <code>Current File</code>.</li> <li>Choose Your Focus: Utilize the secondary focus dropdown to select between Selected Lines or Selected Component based on your current requirement.</li> <li>Execute a Command: Type in your desired command (e.g., <code>/ask</code>, <code>/docstring</code>) followed by your question or request. Ensure your command matches the focus option you've selected for contextually relevant responses.</li> </ol>"},{"location":"chat/focus/current-file/#use-cases","title":"Use Cases","text":"<ul> <li>Code Understanding and Documentation: Use <code>/explain</code> or <code>/docstring</code> for in-depth understanding and documentation of specific functions or classes.</li> <li>Code Quality Improvement: Employ <code>/enhance</code> or <code>/improve</code> to refine your code with best practices, optimizations, and security enhancements.</li> <li>Test Suite Generation: Leverage <code>/test-suite</code> or <code>/quick-test</code> for automated generation of test cases tailored to your selected code.</li> </ul>"},{"location":"chat/focus/git-diff/","title":"Git Diff","text":""},{"location":"chat/focus/git-diff/#git-diff","title":"Git Diff","text":""},{"location":"chat/focus/git-diff/#overview","title":"Overview","text":"<p>Git-Diff Focus in Qodo Gen is designed to facilitate work with code changes across your entire project. This focus enables you to concentrate on different types of changes within your workspace, providing a broad view that's essential for managing version control and preparing for commits or pull requests.</p> <p>Pro feature</p> <p>Some of the Git-Diff focus options are exclusively available for Teams and Enterprise users.</p>"},{"location":"chat/focus/git-diff/#focus-options","title":"Focus Options","text":"<p>Git-Diff Focus offers four distinct options to tailor the Qodo Gen experience to your current workflow needs:</p> <ol> <li>Local Changes: Concentrate on all local changes made in your project or your current file.</li> <li>Staged Changes: Highlight changes that have been staged for commit.</li> <li>Committed Changes: Review changes that have already been committed. This option requires you to select a target branch to compare your changes against, enhancing the context for Qodo Gen's analysis and suggestions.</li> </ol>"},{"location":"chat/focus/git-diff/#commands","title":"Commands","text":"<p>The following commands are supported in Git-Diff focus, offering a wide range of functionalities tailored to managing and understanding changeset:</p> <ul> <li><code>/commit</code>: Generate commit messages for staged changes.</li> <li><code>/describe</code>: Produce structured descriptions of changesets for pull requests.</li> <li><code>/review</code>: Provide comprehensive reviews of changesets, including analysis and feedback.</li> <li><code>/improve</code>: Suggest improvements for code quality and security.</li> <li><code>/recap</code>: Summarize all changes in the selected changeset.</li> <li><code>/issues</code>: Identify potential issues within the code, such as security vulnerabilities or bugs.</li> <li><code>/update-changelog</code>: Automatically update the changelog file with a summary of recent changes.</li> </ul>"},{"location":"chat/focus/git-diff/#how-to-use-git-diff-focus","title":"How to Use Git-Diff focus","text":"<ol> <li>Access Git-Diff Focus: Within Qodo Gen chat, click on the <code>@</code> button, or type <code>@</code> in the chat and use the keyboard arrows, choose <code>Git-Diff</code> and choose your desired diff - <code>Local Changes</code>, <code>Staged Changes</code> or <code>Committed Changes</code>.</li> <li>Choose Your Focus: Use the focus dropdown to select among Local Changes, Local Changes Without New Files, Staged Changes, or Committed Changes.</li> <li>Select Target Branch (if necessary): For committed changes, specify the target branch you're comparing changes against to refine Qodo Gen's insights.</li> <li>Execute a Command: Enter your chosen command to gain insights, documentation, review, or other assistance based on your selected focus.</li> </ol>"},{"location":"chat/focus/git-diff/#use-cases","title":"Use Cases","text":"<ul> <li>Preparing for Commits: Use <code>/commit</code> or <code>/describe</code> to craft meaningful commit messages and pull request descriptions.</li> <li>Code Quality Assurance: Employ <code>/review</code>, <code>/improve</code>, and <code>/issues</code> to enhance the quality and security of your code before finalizing changes.</li> <li>Change Management: Leverage <code>/recap</code> and <code>/update-changelog</code> to maintain comprehensive records of project evolution and ensure transparency.</li> </ul>"},{"location":"code-completion/","title":"Qodo Gen Code Completion","text":""},{"location":"code-completion/#qodo-gen-code-completion","title":"Qodo Gen Code-Completion","text":""},{"location":"code-completion/#overview","title":"Overview","text":"<p>Code Completion by Qodo Gen is a powerful tool designed to accelerate your coding process, reducing the need for repetitive tasks such as copying and pasting code snippets from the internet. By enabling Code Completion, Qodo Gen learns from your codebase and provides real-time suggestions that seamlessly integrate with your writing flow.</p> <p>Pro feature</p> <p>Code Completion is exclusively available for Teams and Enterprise users.</p>"},{"location":"code-completion/#how-it-works","title":"How It Works","text":"<p>As you type, Qodo Gen analyzes your code in real-time to grasp your intention. It then presents code completions in a grayed-out format directly in your editor. These suggestions aim to complete your current line of code or offer snippets that fit the context of your work. To accept a suggestion, simply press the Tab key, and the completion will be inserted into your code.</p>"},{"location":"code-completion/#tailoring-code-completion","title":"Tailoring Code Completion","text":"<p>Qodo Gen allows you to customize Code Completion to suit your specific coding style and needs. Through the extension settings, you can provide general instructions that guide the AI in generating code completions. This customization ensures that the suggestions are not only accurate but also align with your preferences and project requirements.</p> <p>Configure your Code Completion settings</p>"},{"location":"code-completion/#integration-with-qodo-gen-coding-agent","title":"Integration with Qodo Gen Coding-Agent","text":"<p>The integration of Code Completion with Coding-Agent goes beyond traditional suggestions. The Coding-Agent excels in creating tailored plans for tasks described by the user. Once a task is defined, Qodo Gen can load this plan into the code completion system, assisting you in generating the precise code needed to accomplish the task.</p> <p>This unique approach ensures that code completion is not just about filling in the blanks but actively contributing to the realization of your project goals. By understanding the task at hand, Qodo Gen's Code Completion becomes a proactive partner in your coding process, guiding you through the implementation of solutions that directly address your requirements.</p> <p>Read more about Qodo Gen's Coding-Agent</p>"},{"location":"code-completion/#benefits","title":"Benefits","text":"<ul> <li>Speed Up Coding: Significantly reduce the time spent typing out common patterns or searching for code snippets.</li> <li>Improve Accuracy: Qodo Gen's AI-driven suggestions help minimize syntax and logical errors by offering tested patterns.</li> <li>Enhance Learning: Discover new ways of coding and best practices through Qodo Gen's intelligent suggestions.</li> </ul> <p>By incorporating Code Completion into your development workflow, you not only enhance your efficiency but also elevate the quality of your code. Qodo Gen is here to support you in writing better code faster, letting you focus on the creative aspects of development.</p> <p>Enable Code Completion today and experience a smoother, more intuitive coding process with Qodo Gen.</p>"},{"location":"installation/","title":"Installing Qodo Gen","text":""},{"location":"installation/#installing-qodo-gen","title":"Installing Qodo Gen","text":"<p>Welcome to the first step in enhancing your development workflow with Qodo Gen. Follow this guide to download, install, and begin using Qodo Gen in your IDE.</p>"},{"location":"installation/#supported-ides","title":"Supported IDEs","text":"<ul> <li> <p>VSCode </p> <p> Install Qodo Gen extension for VSCode</p> </li> <li> <p>JetBrains </p> <p> Install Qodo Gen free plugin for all JetBrains IDEs</p> </li> </ul>"},{"location":"installation/extension-settings/","title":"Extension Setting","text":""},{"location":"installation/extension-settings/#extension-settings","title":"Extension Settings","text":"<p>Customize your Qodo Gen experience with a range of settings designed to tailor the extension's functionality to your workflow. Whether you're using VSCode or JetBrains, you can adjust Qodo Gen to fit your development environment perfectly.</p> VSCodeJetBrains"},{"location":"installation/extension-settings/#1-enable-disable-qodo-gen","title":"1. Enable / Disable Qodo Gen","text":"<p>Toggle Qodo Gen's functionality on or off within your VSCode environment.</p>"},{"location":"installation/extension-settings/#2-editor-buttons","title":"2. Editor Buttons","text":"<p>Choose to show or hide lens buttons, giving you control over the visibility of Qodo Gen's interface elements in the editor.</p>"},{"location":"installation/extension-settings/#3-javascript-tests-config-1-run-working-directory","title":"3. JavaScript Tests Config-1: Run Working Directory","text":"<p>Specify the working directory for running JavaScript/TypeScript tests. This setting is crucial for ensuring tests run in the correct context.</p> <ul> <li>Path: Use the absolute path to the root directory of your project (where your <code>package.json</code> resides).</li> </ul>"},{"location":"installation/extension-settings/#4-javascript-tests-config-2-run-command","title":"4. JavaScript Tests Config-2: Run Command","text":"<p>Define the command to run a single JavaScript/TypeScript test file, with <code>TEST_FILEPATH</code> placeholder replaced by the actual test file path.</p> <ul> <li>Command Examples:<ul> <li><code>npx jest --runTestsByPath TEST_FILEPATH</code></li> <li><code>npx ts-mocha TEST_FILEPATH --require ./test/mocha/setup.ts</code></li> </ul> </li> </ul>"},{"location":"installation/extension-settings/#5-javascript-tests-config-3-run-default-imports","title":"5. JavaScript Tests Config-3: Run Default Imports","text":"<p>List default imports to prepend to JavaScript test files, separated by <code>\\n</code>, enhancing test file setup.</p>"},{"location":"installation/extension-settings/#6-code-completion","title":"6. Code Completion","text":"<p>Enable or disable code completion features provided by Qodo Gen.</p>"},{"location":"installation/extension-settings/#7-code-completion-user-instructions","title":"7. Code Completion: User Instructions","text":"<p>Input custom instructions for code auto-completion, utilized by the AI to better align with your coding style.</p>"},{"location":"installation/extension-settings/#8-agent-settings","title":"8. Agent Settings","text":"<p>Adjust settings for automatically running <code>/improve</code> on mid-size changesets and <code>/issues</code> on small-size changesets, optimizing your use of Qodo Gen's AI assistance.</p>"},{"location":"installation/extension-settings/#1-enable-disable-lens-button-display","title":"1. Enable / Disable Lens Button Display","text":"<p>Control the visibility of lens buttons within your editor, tailoring how Qodo Gen integrates into your coding environment.</p>"},{"location":"installation/extension-settings/#2-enable-disable-qodo-gen-gutter-icons","title":"2. Enable / Disable Qodo Gen Gutter Icons","text":"<p>Toggle the display of Qodo Gen gutter icons, providing flexibility in how Qodo Gen's cues appear alongside your code.</p>"},{"location":"installation/jetbrains/","title":"JetBrains IDEs","text":""},{"location":"installation/jetbrains/#jetbrains-ides","title":"JetBrains IDEs","text":""},{"location":"installation/jetbrains/#getting-started","title":"Getting Started","text":"<ul> <li> <p>JetBrains </p> <p> Install Qodo Gen plugin for all JetBrains IDEs</p> </li> </ul>"},{"location":"installation/jetbrains/#install-qodo-gen","title":"Install Qodo Gen","text":"<p>Follow these steps to install the Cody plugin:</p> <ol> <li>Open the JetBrains editor on your machine.</li> <li>Open Settings (Mac: Cmd+, Windows: Ctrl+Alt+S) and select Plugins</li> <li>Type and search Qodo Gen plugin and click Install</li> <li>After installing, you may be prompted to reload the IDE to activate the plugin.</li> <li>Now the Qodo Gen icon appears in the sidebar.</li> </ol>"},{"location":"installation/jetbrains/#login-methods","title":"Login methods","text":"<p>There are three login methods:</p> <ol> <li>Login with Google: Quick access using your Google account.</li> <li>Login with GitHub: Utilize your GitHub account for an easy login experience.</li> <li>Login with Email + Verification Code: For those who prefer using their email, enter your email address, receive a verification code, and proceed with the login.</li> </ol>"},{"location":"installation/jetbrains/#login-to-teams-plan","title":"Login to Teams Plan","text":"<p>Once you receive your invitation email from your team administrator and have installed the extension, please log in using the email address to which the invitation was sent. Choose one of the login methods to complete your login.</p>"},{"location":"installation/jetbrains/#login-to-enterprise-plan","title":"Login to Enterprise Plan","text":"<p>For Enterprise users, please login with your work email with the registered domain. You will be automatically connect to your organization workspace. Choose one of the login methods to complete your login.</p> <p>If your organization has Single Sign-On (SSO) configured, you may also use this method for an even smoother login process.</p>"},{"location":"installation/jetbrains/#android-studio-support-jcef","title":"Android Studio support JCEF","text":"<p>Qodo Gen Plugin uses JCEF (Java Chromium Embedded Framework) to create a webview component in the plugin's tool window. By default, most IntelliJ-based IDEs come with a boot runtime that includes JCEF. However, Android Studio (and some other versions of IntelliJ-based IDEs) utilize a boot runtime lacking JCEF, which prevents the plugin from loading in these environments.</p> <p>Also in some cases JCEF could persist but not been initialised.</p> <p>To address this issue: </p> <ol> <li>Navigate to the \"Help\" -&gt; \"Find Action...\" and find(type) \"Registry\". Here disable <code>ide.browser.jcef.sandbox.enable</code> option.</li> <li>Navigate to the \"Help\" -&gt; \"Find Action...\" and find(type) \"Choose Boot Runtime for the IDE\" dialog. Here, you can select a boot runtime equipped with JCEF.</li> <li>Restart the IDE.</li> </ol> <p>If the issue persist, please open an issue in our GitHub issue tracker or contact support@qodo.ai.</p>"},{"location":"installation/opt-out/","title":"OptOut","text":""},{"location":"installation/opt-out/#opt-out-of-data-training","title":"Opt Out of Data Training","text":"<p>Paying users, in Teams and Enterprise plans, are opt-ed out from Qodo's model training. Free users have the option to request for opt-out.</p> <p>We've made a change to allow users to opt in and out of data training on their own within the user portal.</p> <p>In order to opt out:</p> <ol> <li>Log in to https://app.qodo.ai/.</li> <li>Go to Account Settings.</li> <li>Toggle the \"data utilization\" switch off.</li> </ol>"},{"location":"installation/opt-out/#optout-direcly-from-our-jetbrains-plugin","title":"OptOut direcly from our JetBrains plugin","text":"<p>In order to opt out directly from our JetBrains plugin without emailing support, simply go to Plugin Settings and toggle the <code>Opt out of sharing my data with Qodo</code> switch to on. This will opt you out immediately.</p>"},{"location":"installation/plans/","title":"Subscription Plans","text":""},{"location":"installation/plans/#subscription-plans","title":"Subscription Plans","text":"<p>Qodo Gen offers three distinct subscription plans to cater to the diverse needs of individual developers, teams, and enterprises. Each plan is designed to provide the tools and features necessary to enhance your coding, testing, and review processes.</p>"},{"location":"installation/plans/#available-plans","title":"Available Plans","text":"<ul> <li> <p> Free</p> <p>The Free plan is ideal for individual developers or small teams just getting started with Qodo Gen. It offers basic features that improve coding efficiency and test generation.</p> </li> <li> <p> Teams</p> <p>Tailored for development teams looking for advanced features and collaborative tools to boost productivity and code quality. The Teams plan includes everything in the Free plan, plus additional pro features for a more comprehensive development experience.</p> </li> <li> <p> Enterprise</p> <p>Designed for large organizations requiring enterprise-level support, security, and customization. This plan includes all the benefits of the Teams plan, with additional features and services to meet the needs of enterprise projects.</p> </li> </ul> <p>Learn more about our plans and choose the one that fits your needs.</p>"},{"location":"installation/plans/#two-weeks-free-trial","title":"Two Weeks Free Trial","text":"<p>New users signing up for Qodo Gen are welcomed with a 2-week free trial of the Teams tier, providing full access to all pro features.</p> <ul> <li>Immediate Access: Start using all Teams features immediately upon signing up with the Free plan.</li> <li>Upgrading: If you find the pro features beneficial, you can easily upgrade to the Teams or Enterprise plan at any time during or after your trial.</li> <li>Reverting to Free Plan: If you decide not to upgrade, you'll automatically continue with the Free plan once the 2-week trial concludes, still enjoying access to Qodo Gen's essential features.</li> </ul>"},{"location":"installation/vscode/","title":"VSCode IDE","text":""},{"location":"installation/vscode/#vscode-ide","title":"VSCode IDE","text":""},{"location":"installation/vscode/#getting-started","title":"Getting Started","text":"<ul> <li> <p>Qodo Gen for VSCode </p> <p> Install Qodo Gen extension for VSCode</p> </li> </ul>"},{"location":"installation/vscode/#install-qodo-gen","title":"Install Qodo Gen","text":"<p>Follow these steps to install the Cody plugin:</p> <ol> <li>Open VSCode IDE on your machine</li> <li>Click the Extensions icon in the Activity Bar on the side of VSCode, or use the keyboard shortcut Cmd+Shift+X (macOS) or Ctrl+Shift+X (Windows/Linux)</li> <li>Type Qodo Gen in the search bar and click the Install button.</li> <li>After installing, you may be prompted to reload the extensions to activate the extension.</li> <li>Now the Qodo Gen icon appears in the Activity Bar.</li> </ol>"},{"location":"installation/vscode/#login-methods","title":"Login methods","text":"<p>There are three login methods:</p> <ol> <li>Login with Google: Quick access using your Google account.</li> <li>Login with GitHub: Utilize your GitHub account for an easy login experience.</li> <li>Login with Email + Verification Code: For those who prefer using their email, enter your email address, receive a verification code, and proceed with the login.</li> </ol>"},{"location":"installation/vscode/#login-to-teams-plan","title":"Login to Teams Plan","text":"<p>Once you receive your invitation email from your team administrator and have installed the extension, please log in using the email address to which the invitation was sent. Choose one of the login methods to complete your login.</p>"},{"location":"installation/vscode/#login-to-enterprise-plan","title":"Login to Enterprise Plan","text":"<p>For Enterprise users, please login with your work email with the registered domain. You will be automatically connect to your organization workspace. Choose one of the login methods to complete your login.</p> <p>If your organization has Single Sign-On (SSO) configured, you may also use this method for an even smoother login process.</p>"},{"location":"tests/","title":"Qodo Gen Test Generation","text":""},{"location":"tests/#qodo-gen-test-generation","title":"Qodo Gen Test Generation","text":""},{"location":"tests/#overview","title":"Overview","text":"<p>Qodo Gen revolutionizes the way developers create, refine, and manage test suites for their projects. By harnessing advanced AI technology, Qodo Gen supports test generation across all programming languages, making it a versatile tool for developers worldwide. This feature is designed to enhance productivity, improve code quality, and streamline the testing process, ensuring your software meets the highest standards of reliability and performance.</p>"},{"location":"tests/#key-features","title":"Key Features","text":""},{"location":"tests/#universal-language-support","title":"Universal Language Support","text":"<p>Qodo Gen proudly offers test generation capabilities for all programming languages, ensuring every developer can benefit from automated test creation. </p> <p>Learn more about supported languages.</p>"},{"location":"tests/#initiating-test-generation","title":"Initiating Test Generation","text":"<p>Initiating test generation is straightforward, with multiple entry points to suit your workflow. All test generation activities converge in the advanced panel, where behaviors are analyzed, and tests are crafted. Generate tests with:</p> <ol> <li>Qodo Gen Test Lens: Click the \"Qodo Gen: test\" lens button appearing above every function, class, or method.</li> <li>Context Menu: Right-click on any selected code or component name and select \"Qodo Gen - Test this component\" from the context menu.</li> <li>Command Palette (In VSCode): Highlight the desired code, open the command palette, and execute \"Qodo Gen: Generate tests.\"</li> <li>Qodo Gen Button (In JetBrains): Click on the Qodo Gen icon located near every identifiable component.</li> </ol> <p>Learn more about using the advanced panel.</p>"},{"location":"tests/#refining-your-test-suite","title":"Refining Your Test Suite","text":"<p>Qodo Gen doesn't stop at generating tests. It offers an array of features for refining and customizing your test suite:</p> <ul> <li>Example Tests: Guide the style of your generated tests by providing Qodo Gen with an example test.</li> <li>Context Awareness: Qodo Gen gathers context from your code to generate relevant and accurate tests.</li> <li>Running and Auto-fixing Tests: Validate and automatically fix your tests with Qodo Gen's run and auto-fix feature, available for certain supported languages.</li> </ul> <p>Learn more about test suite refinement.</p>"},{"location":"tests/#running-tests-vscode-only","title":"Running Tests (VSCode only)","text":"<p>Qodo Gen integrates directly with your development environment to offer a streamlined process for running tests. This feature enables you to:</p> <ul> <li>Run and Auto-Fix Tests: Automatically run generated tests with the option for Qodo Gen to attempt fixes on failing tests, enhancing efficiency by iteratively improving test success rates.</li> <li>Manual Test Execution: Choose to manually run tests without auto-fix interventions, providing you with direct insight into test outcomes.</li> </ul> <p>Learn more about running tests.</p>"},{"location":"tests/#configuration","title":"Configuration","text":"<p>Tailor Qodo Gen's test generation to your project's needs through the Configuration tab, and continuously improve the test generation process by providing feedback on generated tests.</p> <p>Learn more about configuration.</p>"},{"location":"tests/#conclusion","title":"Conclusion","text":"<p>Qodo Gen's test generation feature is a comprehensive solution designed to support developers in creating robust, reliable software. By automating and refining the test creation process, Qodo Gen not only saves valuable time but also enhances the overall quality of your projects.</p>"},{"location":"tests/behaviors/","title":"Behaviors","text":""},{"location":"tests/behaviors/#understanding-behaviors-in-test-generation","title":"Understanding Behaviors in Test Generation","text":""},{"location":"tests/behaviors/#overview","title":"Overview","text":"<p>In the journey of test generation, Qodo Gen employs a sophisticated approach to thoroughly analyze your code. This analysis extends beyond mere syntax, incorporating an understanding of dependencies and imports. This comprehensive view helps grasp the full context of your code's functionality, leading to the identification of various behaviors your code exhibits.</p>"},{"location":"tests/behaviors/#behavior-categories","title":"Behavior Categories","text":"<p>Qodo Gen categorizes identified behaviors into three main types, each representing a different aspect of how your code operates:</p> <ul> <li>Happy Path: Behaviors under this category represent the ideal and expected use cases of your code, where everything operates as intended without any errors or exceptions.</li> <li>Edge Case: Behaviors that occur at the boundaries of your code's logic, handling unusual or extreme inputs or scenarios that might not be immediately obvious.</li> <li> <p>Other: A catch-all category that encompasses behaviors not fitting neatly into the first two categories, including less common use cases or those requiring special consideration.</p> VSCodeJetBrains <p> </p> <p> </p> </li> </ul>"},{"location":"tests/behaviors/#exploring-sub-behaviors","title":"Exploring Sub Behaviors","text":"<p>Each identified behavior can be expanded to reveal its sub behaviors, which are more specific instances or variations of the main behavior. This allows for a granular understanding of how your code functions in different scenarios. To explore sub behaviors:</p> <ol> <li>Click the Arrow: Next to each behavior, an arrow icon allows you to expand the behavior and view its sub behaviors.</li> <li> <p>Review Sub Behaviors: Each sub behavior represents a more explicit use case of the parent behavior, providing insight into detailed operational nuances of your code.</p> VSCodeJetBrains <p> </p> <p> </p> </li> </ol>"},{"location":"tests/behaviors/#generating-tests-for-behaviors","title":"Generating Tests for Behaviors","text":"<p>Qodo Gen not only identifies behaviors but also automatically generates tests for a selected set of initial behaviors to jumpstart your testing process. You have the flexibility to:</p> <ul> <li>Select More Behaviors: Beyond the initial selection, you can choose additional behaviors or sub behaviors for which you want tests to be generated.</li> <li>Create Custom Behaviors: If a specific behavior you're interested in is not listed, Qodo Gen allows you to define it manually:<ol> <li>Add Behavior: In the behavior analysis section, enter a natural language description of the desired behavior in the \"Add behavior\" field.</li> <li>Generate Test: Click the \"Add and Generate\" button to create a test based on your custom behavior description.</li> </ol> </li> </ul> <p>By leveraging the behavior analysis and test generation capabilities of Qodo Gen, you can ensure comprehensive test coverage, capturing the full spectrum of how your code operates\u2014from the most common scenarios to the edge cases that could lead to unexpected behavior.</p>"},{"location":"tests/configuration/","title":"Configuration","text":""},{"location":"tests/configuration/#testing-configuration","title":"Testing Configuration","text":""},{"location":"tests/configuration/#overview","title":"Overview","text":"<p>The Configuration tab within Qodo Gen's Advanced Panel provides a suite of options to tailor the test suite generation process to your specific needs. These configurations ensure that the generated tests align with your project's conventions, requirements, and preferences.</p>"},{"location":"tests/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"tests/configuration/#1-general-instructions","title":"1. General Instructions","text":"<p>A free text field where you can specify general instructions that apply to the entire test suite. Use this space to request specific styling, documentation inclusion, or any other overarching guidelines you'd like Qodo Gen to follow during test generation.</p>"},{"location":"tests/configuration/#2-example-test","title":"2. Example Test","text":"<p>Provide an example test in this field to guide Qodo Gen on your preferred naming conventions, styling, use of mocks, etc. Qodo Gen will analyze this example to align the generated tests with your project's existing patterns and practices.</p>"},{"location":"tests/configuration/#3-number-of-tests","title":"3. Number of Tests","text":"<p>Set the desired number of tests for Qodo Gen to generate initially. This allows you to control the volume of tests based on your project's scale, coverage goals, or other considerations.</p>"},{"location":"tests/configuration/#4-testing-framework","title":"4. Testing Framework","text":"<p>Select your preferred testing framework from the available options. This ensures that the tests Qodo Gen generates are compatible with your project's testing environment and conventions.</p>"},{"location":"tests/configuration/#regenerate-test-suite","title":"Regenerate Test Suite","text":"<p>After making any changes to the configurations, it's essential to apply these updates by clicking the \"Regenerate\" button. This action prompts Qodo Gen to regenerate the test suite based on the new configuration settings, ensuring that all modifications are accurately reflected in the generated tests.</p>"},{"location":"tests/configuration/#saving-configuration-to-a-file","title":"Saving Configuration to a File","text":"<p>To preserve your configurations and ensure consistency across your project or team, Qodo Gen allows you to save these settings to a TOML file:</p> <ol> <li>Save Configurations: Within the Configuration tab, find the option to export your settings.</li> <li>File Name: Save the exported configurations to a file named <code>.codiumai.toml</code>.</li> <li>File Location: It's recommended to place this file in the root folder of your project for easy access and recognition.</li> <li>Version Control:<ul> <li>Collaboration: Consider adding <code>.codiumai.toml</code> to your project's git repository to share these configurations with your team, promoting uniformity in test generation across all contributors.</li> <li>Local Preferences: Alternatively, if the configurations are intended for personal use, you might opt to add <code>.codiumai.toml</code> to your <code>.gitignore</code> file to keep them local.</li> </ul> </li> </ol> <p>See an example of configuration file</p>"},{"location":"tests/configuration/#available-sections-and-configuration-keys","title":"Available Sections and Configuration Keys","text":""},{"location":"tests/configuration/#tests","title":"<code>[tests]</code>","text":"<ul> <li> <p><code>framework</code>:</p> <ul> <li>Description: Specifies the testing framework to be used, affecting both the content of the generated tests and the command used to run them.</li> <li>Possible Values:<ul> <li>Python: <code>Pytest</code>, <code>Unittest</code></li> <li>JavaScript / TypeScript: <code>Jest</code>, <code>Mocha</code>, <code>Karma</code>, <code>Jasmine</code>, <code>QUnit</code>, <code>React Testing Library</code></li> </ul> </li> <li>Note: Test execution in JavaScript / TypeScript is currently supported only for <code>Jest</code>, <code>Mocha</code>, and <code>React Testing Library</code>.</li> </ul> </li> <li> <p><code>utility_library</code>:</p> <ul> <li>Description: An additional JavaScript utility library used for testing, if any. </li> <li>Possible Values: <code>None</code>, <code>Testing Library</code>, <code>Enzyme</code>, <code>Chai</code>.</li> <li>Applicability: Not applicable to Python projects.</li> </ul> </li> <li> <p><code>reference_test</code>:</p> <ul> <li>Description: A multiline string, enclosed in triple quotes (<code>\"\"\"</code>), providing an example test to guide the style, setup, etc., of the generated tests.</li> </ul> </li> <li> <p><code>use_mocks</code>:</p> <ul> <li>Description: Indicates whether to use mocks in the generated tests.</li> <li>Possible Values: <code>true</code>, <code>false</code>.</li> </ul> </li> <li> <p><code>num_desired_tests</code>:</p> <ul> <li>Description: Specifies the default number of tests to be generated. Selecting fewer tests results in faster generation.</li> </ul> </li> </ul>"},{"location":"tests/configuration/#testsjavascript","title":"<code>[tests.javascript]</code>","text":"<p>For JavaScript / TypeScript projects, the following configuration values control the test runner:</p> <ul> <li> <p><code>overrideTestRunCwd</code>:</p> <ul> <li>Description: Specifies the directory to use as the \"current working directory\" when running JavaScript / TypeScript tests.</li> <li>Default Value: The directory containing the config file.</li> <li>Note: It is common practice to place the config file in the same directory as the <code>package.json</code> file and to leave this option as the default.</li> </ul> </li> <li> <p><code>overrideTestRunScript</code>:</p> <ul> <li>Description: Defines the command used to run tests.</li> <li>Important: Qodo Gen generates a temporary file containing the test code for a single test and runs that file. After testing, this file is deleted. For component-oriented tests, the temporary file is created next to the file being tested. For suite-extension tests, it is created next to the test suite file.</li> <li>Note: You should start the command with 'npx' (e.g., 'npx jest'), and ensure the test command can run test files in the same directory as the file under test. Adjust your package.json script to avoid exclusions that could cause Qodo Gen tests to be \"not found\".</li> <li>Placeholder: <code>TEST_FILEPATH</code> will be replaced with the actual path of the test file.</li> <li>Examples:<ul> <li>Mocha:     <pre><code>npx ts-mocha TEST_FILEPATH --require ./test/mocha/setup.ts\n</code></pre></li> <li>Jest:     <pre><code>npx jest --runTestsByPath TEST_FILEPATH\n</code></pre></li> </ul> </li> <li>Debugging Note: To debug test run issues, consult the run logs in VSCode's OUTPUT (select Qodo from the dropdown). Clearing the output before running tests again can be helpful.</li> </ul> </li> <li> <p><code>overrideImports</code>:</p> <ul> <li>Description: A multiline string, enclosed in triple quotes (<code>\"\"\"</code>), containing import declarations that will be prepended to each test file.</li> </ul> </li> </ul>"},{"location":"tests/context/","title":"Context Tab","text":""},{"location":"tests/context/#understanding-context-in-test-generation","title":"Understanding Context in Test Generation","text":""},{"location":"tests/context/#overview","title":"Overview","text":"<p>Effective test generation in Qodo Gen relies heavily on understanding the context of your project. When initiating test generation, Qodo Gen meticulously collects context based on your code's dependencies and interactions. This rich context is crucial for generating accurate and meaningful tests that closely align with your project's specific requirements.</p>"},{"location":"tests/context/#context-collection","title":"Context Collection","text":"<p>Qodo Gen's context collection process encompasses several aspects:</p> <ul> <li>Code Dependencies: Analyzes the dependencies within your code to understand the relationships and functionalities that need to be tested.</li> <li>Existing Tests: Searches for existing tests within your project that could serve as templates for new tests, enhancing style consistency across your test suite. Learn more about example tests.</li> </ul>"},{"location":"tests/context/#reviewing-context","title":"Reviewing Context","text":"<p>To gain insights into the context Qodo Gen has collected for test generation:</p> <ol> <li>Access the Context Tab: The advanced panel features a \"Context\" tab where the collected context is displayed.</li> <li>Explore Context Tags: Each piece of context is tagged, providing a clear indication of its source and type.</li> <li>Navigate to Source: Clicking on a context tag will take you directly to the corresponding code or test, allowing you to review the basis for Qodo Gen's test generation decisions.</li> </ol>"},{"location":"tests/context/#context-types","title":"Context Types","text":"<p>Each context tag is associated with a type, which helps in understanding the role it plays in test generation:</p> <ul> <li>Reference Test: Existing tests in your project that provide styling cues or functional insights for generating new tests.</li> <li>Imported File: Files that your code depends on, offering structural and functional context that influences test generation.</li> <li>Referenced in Files: Identifies locations where the code is used or referenced across your project, providing insight into real-world usage and potential edge cases that need testing.</li> </ul>"},{"location":"tests/context/#benefits-of-context-awareness","title":"Benefits of Context Awareness","text":"<p>By leveraging detailed context, Qodo Gen ensures that the generated tests are not only syntactically correct but also deeply integrated with the logic and architecture of your project, resulting in a robust and comprehensive test suite.</p> <p>Understanding the context behind test generation allows you to appreciate the depth of Qodo Gen's analysis and its impact on producing high-quality, relevant tests tailored to your project's unique environment.</p>"},{"location":"tests/example-test/","title":"Example Test","text":""},{"location":"tests/example-test/#using-example-tests-for-better-test-generation","title":"Using Example Tests for Better Test Generation","text":"<p>Please Notice</p> <p>In JetBrains this field is called \"Reference Test\"</p>"},{"location":"tests/example-test/#overview","title":"Overview","text":"<p>Qodo Gen enhances its test generation capabilities by allowing the use of example tests. This feature enables Qodo Gen to generate new tests that follow a specific style or format you prefer, ensuring consistency and adherence to your project's testing conventions.</p>"},{"location":"tests/example-test/#providing-an-example-test","title":"Providing an Example Test","text":"<p>There are several ways to provide Qodo Gen with an example test, each designed to suit different workflows and preferences:</p> <ol> <li>Direct Input: Copy and paste a test you like into the \"Example Test\" field located in the main test tab. Once you regenerate the test suite, Qodo Gen will attempt to generate new tests mirroring the styling of your example.</li> <li>Configuration Tab: For a more permanent setup, you can add the example test to the configuration tab. Saving this to the configuration file means all future tests generated by Qodo Gen will use this example as a template.</li> <li>Automatic Detection: If no example test is provided, Qodo Gen will search your project for a suitable test to use as an example. The identified test will be displayed in the main test tab with a note explaining Qodo Gen's choice. You have the option to delete or change this test if it doesn't meet your requirements.</li> </ol>"},{"location":"tests/example-test/#benefits-of-using-example-tests","title":"Benefits of Using Example Tests","text":"<ul> <li>Consistency: Ensures that all generated tests adhere to your preferred style and formatting, maintaining consistency across your test suite.</li> <li>Customization: Gives you the flexibility to influence the structure and content of the generated tests, tailoring them to better fit your project's needs.</li> <li>Efficiency: Saves time by automating the generation of tests that align with your existing testing practices, reducing the need for manual adjustments.</li> </ul>"},{"location":"tests/example-test/#managing-the-example-test","title":"Managing the Example Test","text":"<ul> <li>Change or Remove: At any point, you can modify or remove the current example test from the main test tab to adjust Qodo Gen's test generation behavior.</li> <li>Update Configuration: To change the default example test for future test generations, simply update the example test in the configuration tab and save your changes.</li> </ul>"},{"location":"tests/how-to-use/","title":"How to use","text":""},{"location":"tests/how-to-use/#how-to-use-test-generation-in-qodo-gen","title":"How to Use Test Generation in Qodo Gen","text":"<p>Test Generation is a standout feature of Qodo Gen, designed to streamline and enhance the process of creating comprehensive test suites for your code. Unlike the interactive chat, test generation operates within a dedicated advanced panel, providing a focused environment for creating and managing tests.</p>"},{"location":"tests/how-to-use/#initiating-test-generation","title":"Initiating Test Generation","text":"<p>There are multiple pathways to initiate test generation, catering to your workflow and preferences:</p>"},{"location":"tests/how-to-use/#from-the-chat","title":"From the Chat","text":"<ul> <li><code>/test-suite</code> Command: Execute the <code>/test-suite</code> command on selected code within the chat interface to trigger test generation.</li> </ul>"},{"location":"tests/how-to-use/#from-the-editor","title":"From the Editor","text":"<ol> <li> <p>Lens Buttons: Generate tests through lens buttons above any class, function or method (can be disabled from the extension settings):</p> </li> <li> <p>Context Menu: Right-click on any selected code or component name and select \"Qodo Gen - Test this component\" from the context menu.</p> </li> <li> <p>Command Palette (VSCode): use command palettes to generate tests:</p> </li> <li> <p>Qodo Gen Button (JetBrains) : use Qodo Gen button near every class, function or method (can be disabled from the extension settings):</p> </li> </ol>"},{"location":"tests/how-to-use/#the-advanced-panel","title":"The Advanced Panel","text":"<p>Upon initiating test generation, the advanced panel opens, marking the beginning of your test creation process. The panel is divided into two main sections:</p>"},{"location":"tests/how-to-use/#list-of-behaviors","title":"List of Behaviors","text":"<p>The panel starts by presenting a list of behaviors detected in your selected code. Each behavior corresponds to a specific use case or functionality that your code is expected to perform, serving as a foundation for test coverage.</p> <p>Read more about behaviors</p>"},{"location":"tests/how-to-use/#generated-tests","title":"Generated Tests","text":"<p>Following the behavior list, you will see generated tests covering a selection of the identified behaviors. These tests are designed to provide immediate value, offering examples of how each behavior can be tested.</p> <p>Read more about the generated tests</p>"},{"location":"tests/how-to-use/#example-test","title":"Example Test","text":"<p>At the top of the tab, there's an Example Test field, that lets you guide the style of generated tests by providing a sample test. Insert a test in the designated field or save it in the settings. If unspecified, Qodo Gen chooses an existing project test as a template, ensuring consistency across your test suite.</p> <p>Read more about example test</p>"},{"location":"tests/how-to-use/#next-steps","title":"Next Steps","text":"<p>After reviewing the generated tests and behaviors, you can further refine the tests, add new tests for uncovered behaviors, or modify existing tests to better suit your project's needs. The advanced panel provides a powerful, interactive environment for enhancing your project's test coverage and ensuring the reliability of your code.</p>"},{"location":"tests/running-tests/","title":"Running Tests","text":""},{"location":"tests/running-tests/#running-tests-in-qodo-gen-vscode","title":"Running Tests in Qodo Gen (VSCode)","text":"<p>VSCode Only</p> <p>This feature is available for VSCode users only.</p>"},{"location":"tests/running-tests/#overview","title":"Overview","text":"<p>For VSCode users working with supported languages, Qodo Gen offers an integrated feature to run tests directly from the advanced panel. This ensures your generated test suite performs as expected right off the bat. You have two primary options for running tests: with automatic fixes or without.</p>"},{"location":"tests/running-tests/#running-tests-options","title":"Running Tests Options","text":"<ol> <li>Run and Auto Fix: This default option attempts to automatically fix any issues if a test fails. Learn more about Run and Auto Fix.</li> <li>Run Only: Accessible by clicking the arrow next to the \"Run and auto-fix\" button, this option runs the test without attempting any automatic fixes.</li> </ol> <p>Both single tests and all tests in the suite can be executed using the \"Run all tests\" button located above the test list.</p>"},{"location":"tests/running-tests/#run-and-auto-fix-flow","title":"Run and Auto-Fix Flow","text":"<p>When opting for \"Run and auto-fix\", Qodo Gen acts as a testing agent through the following steps:</p> <ol> <li>Initial Test Run: Qodo Gen runs the selected test(s).</li> <li>Success Path: If the test passes, the process concludes successfully.</li> <li>Failure Analysis:<ul> <li>If a test fails, Qodo Gen analyzes the failure and displays a summary under the <code>POSSIBLE TEST ISSUE</code> section.</li> <li>Test Issue: If the issue lies within the test, Qodo Gen attempts a fix and reruns the test, looping back to step 1.</li> <li>Code Issue: If the analysis suggests a bug in the code, Qodo Gen halts auto-fixing and alerts the user. A bug summary and a \"fix code\" option are presented under the <code>POSSIBLE CODE ISSUE</code>. Clicking \"fix code\" generates a diff view with the proposed fix, which the user can accept to update the code and regenerate the test suite.</li> </ul> </li> </ol>"},{"location":"tests/running-tests/#handling-test-run-issues","title":"Handling Test Run Issues","text":"<p>There might be instances where tests cannot run due to various reasons, such as:</p> <ul> <li>Framework Installation: The testing framework might not be installed in your project, requiring setup before proceeding.</li> <li>Import Issues: Problems with imports or dependencies can also prevent tests from running successfully.</li> </ul> <p>In such cases, Qodo Gen provides a summary of the issue without attempting auto-fixes, guiding you towards resolving the underlying problem to enable test execution.</p>"},{"location":"tests/running-tests/#supported-languages","title":"Supported Languages","text":"<p>This feature is available for a select range of languages supported by Qodo Gen in VSCode. See the list of supported languages.</p>"},{"location":"tests/supported-languages/","title":"Supported Languages","text":""},{"location":"tests/supported-languages/#supported-languages-in-qodo-gen","title":"Supported Languages in Qodo Gen","text":"<p>Qodo Gen offers extensive support across a wide range of programming languages, ensuring developers can leverage its test generation capabilities regardless of their project's language. This inclusivity enhances Qodo Gen's utility, making it a versatile tool for developers seeking to improve their testing practices.</p>"},{"location":"tests/supported-languages/#test-generation-support","title":"Test Generation Support","text":"<p>Qodo Gen supports test generation for ALL programming languages, offering a broad spectrum of developers the ability to automatically create test suites for their code.</p>"},{"location":"tests/supported-languages/#test-running-support","title":"Test Running Support","text":"<p>While Qodo Gen's test generation feature is universally applicable, the ability to run tests directly from Qodo Gen is currently available for a select group of languages:</p> <ul> <li>Python</li> <li>JavaScript</li> <li>TypeScript</li> </ul> <p>This functionality enables developers working in these languages to not only generate tests but also execute them within the Qodo Gen environment, providing immediate feedback on their efficacy and coverage.</p> <p>VSCode only</p> <p>This feature is available for VSCode users only.</p>"},{"location":"tests/test-suite/","title":"Test Suite","text":""},{"location":"tests/test-suite/#managing-the-test-suite-in-qodo-gen","title":"Managing the Test Suite in Qodo Gen","text":""},{"location":"tests/test-suite/#overview","title":"Overview","text":"<p>Following the behavior analysis, Qodo Gen generates an initial list of tests based on the selected testing framework, which you can configure in the configuration file. Each test corresponds to a behavior identified in the preceding analysis and is tagged according to its type: happy path, edge case, other, or custom test.</p> VSCodeJetBrains <p></p> <p></p>"},{"location":"tests/test-suite/#refining-your-tests","title":"Refining Your Tests","text":"<p>Qodo Gen offers several options for refining and customizing the generated tests to ensure they meet your project's requirements:</p> <ol> <li>Refinement via Chat: Beneath each test, a chat field allows you to request specific refinements in natural language. Submit your request by pressing Enter or clicking the send button, and Qodo Gen will update the test based on your instructions.        </li> <li>Manual Editing: Directly edit the test code within the advanced panel for quick tweaks and adjustments.</li> <li>Regenerate Test: Use the \"Regenerate\" button beside each test to generate an alternative version based on the same behavior.</li> <li>Delete Test: If a test is unnecessary or irrelevant, you can remove it from the list.</li> <li>Run and Auto Fix (VSCode Only): For supported languages, this option allows you to run tests directly. If a test fails, Qodo Gen attempts to fix it automatically and re-run it. The process stops if a potential bug is detected, alerting you to the issue. Learn more about supported languages. </li> <li>Regenerate Entire Test Suite: Apply a general instruction for the entire suite via the Configuration tab, then regenerate all tests to reflect this overarching guidance.</li> <li>Request More Tests: Click \"Give me more tests\" to generate additional tests, covering more behaviors in one action.</li> </ol>"},{"location":"tests/test-suite/#test-history-and-feedback","title":"Test History and Feedback","text":"<p>Qodo Gen maintains a history of each test's modifications, accessible through \"Previous\" and \"Next\" buttons, allowing you to track and revisit changes over time.</p>"},{"location":"tests/test-suite/#provide-feedback-vscode-only","title":"Provide Feedback (VSCode only)","text":"<p>Inside each test, you'll find \"Like\" or \"Dislike\" buttons. Your feedback helps Qodo Gen learn and improve test generation accuracy.</p>"},{"location":"tests/test-suite/#finalizing-your-test-suite","title":"Finalizing Your Test Suite","text":"<p>When satisfied with the test suite:</p> <ul> <li> <p>Save to Project: Open the finalized test suite as a file and save it directly into your project, integrating your new, refined tests into your development workflow.</p> </li> <li> <p>Copy tests: Alternatively, you can copy the tests and paste it into your editor.</p> </li> </ul> <p>By leveraging these tools and options, you can fine-tune your test suite to precisely match your expectations, ensuring thorough coverage and robust testing for your code.</p>"}]}